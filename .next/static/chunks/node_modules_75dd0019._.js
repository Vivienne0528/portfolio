(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([
  typeof document === "object" ? document.currentScript : undefined,
  {
    "[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _interop_require_default(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }
          exports._ = _interop_require_default;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _getRequireWildcardCache(nodeInterop) {
            if (typeof WeakMap !== "function") return null;
            var cacheBabelInterop = new WeakMap();
            var cacheNodeInterop = new WeakMap();
            return (_getRequireWildcardCache = function (nodeInterop) {
              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
            })(nodeInterop);
          }
          function _interop_require_wildcard(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule) return obj;
            if (
              obj === null ||
              (typeof obj !== "object" && typeof obj !== "function")
            )
              return {
                default: obj,
              };
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj)) return cache.get(obj);
            var newObj = {
              __proto__: null,
            };
            var hasPropertyDescriptor =
              Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj) {
              if (
                key !== "default" &&
                Object.prototype.hasOwnProperty.call(obj, key)
              ) {
                var desc = hasPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(obj, key)
                  : null;
                if (desc && (desc.get || desc.set))
                  Object.defineProperty(newObj, key, desc);
                else newObj[key] = obj[key];
              }
            }
            newObj.default = obj;
            if (cache) cache.set(obj, newObj);
            return newObj;
          }
          exports._ = _interop_require_wildcard;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _class_private_field_loose_base(receiver, privateKey) {
            if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
              throw new TypeError(
                "attempted to use private field on non-instance",
              );
            }
            return receiver;
          }
          exports._ = _class_private_field_loose_base;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          var id = 0;
          function _class_private_field_loose_key(name) {
            return "__private_" + id++ + "_" + name;
          }
          exports._ = _class_private_field_loose_key;
        }
      },
    "[project]/node_modules/@swc/helpers/cjs/_tagged_template_literal_loose.cjs [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          ("use strict");
          function _tagged_template_literal_loose(strings, raw) {
            if (!raw) raw = strings.slice(0);
            strings.raw = raw;
            return strings;
          }
          exports._ = _tagged_template_literal_loose;
        }
      },
    "[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function defineDeprecationWarning(methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                  get: function () {
                    console.warn(
                      "%s(...) is deprecated in plain JavaScript React classes. %s",
                      info[0],
                      info[1],
                    );
                  },
                });
              }
              function getIteratorFn(maybeIterable) {
                if (null === maybeIterable || "object" !== typeof maybeIterable)
                  return null;
                maybeIterable =
                  (MAYBE_ITERATOR_SYMBOL &&
                    maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                  maybeIterable["@@iterator"];
                return "function" === typeof maybeIterable
                  ? maybeIterable
                  : null;
              }
              function warnNoop(publicInstance, callerName) {
                publicInstance =
                  ((publicInstance = publicInstance.constructor) &&
                    (publicInstance.displayName || publicInstance.name)) ||
                  "ReactClass";
                var warningKey = publicInstance + "." + callerName;
                didWarnStateUpdateForUnmountedComponent[warningKey] ||
                  (console.error(
                    "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
                    callerName,
                    publicInstance,
                  ),
                  (didWarnStateUpdateForUnmountedComponent[warningKey] = !0));
              }
              function Component(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              function ComponentDummy() {}
              function PureComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function cloneAndReplaceKey(oldElement, newKey) {
                newKey = ReactElement(
                  oldElement.type,
                  newKey,
                  void 0,
                  void 0,
                  oldElement._owner,
                  oldElement.props,
                  oldElement._debugStack,
                  oldElement._debugTask,
                );
                oldElement._store &&
                  (newKey._store.validated = oldElement._store.validated);
                return newKey;
              }
              function isValidElement(object) {
                return (
                  "object" === typeof object &&
                  null !== object &&
                  object.$$typeof === REACT_ELEMENT_TYPE
                );
              }
              function escape(key) {
                var escaperLookup = {
                  "=": "=0",
                  ":": "=2",
                };
                return (
                  "$" +
                  key.replace(/[=:]/g, function (match) {
                    return escaperLookup[match];
                  })
                );
              }
              function getElementKey(element, index) {
                return "object" === typeof element &&
                  null !== element &&
                  null != element.key
                  ? (checkKeyStringCoercion(element.key),
                    escape("" + element.key))
                  : index.toString(36);
              }
              function noop$1() {}
              function resolveThenable(thenable) {
                switch (thenable.status) {
                  case "fulfilled":
                    return thenable.value;
                  case "rejected":
                    throw thenable.reason;
                  default:
                    switch (
                      ("string" === typeof thenable.status
                        ? thenable.then(noop$1, noop$1)
                        : ((thenable.status = "pending"),
                          thenable.then(
                            function (fulfilledValue) {
                              "pending" === thenable.status &&
                                ((thenable.status = "fulfilled"),
                                (thenable.value = fulfilledValue));
                            },
                            function (error) {
                              "pending" === thenable.status &&
                                ((thenable.status = "rejected"),
                                (thenable.reason = error));
                            },
                          )),
                      thenable.status)
                    ) {
                      case "fulfilled":
                        return thenable.value;
                      case "rejected":
                        throw thenable.reason;
                    }
                }
                throw thenable;
              }
              function mapIntoArray(
                children,
                array,
                escapedPrefix,
                nameSoFar,
                callback,
              ) {
                var type = typeof children;
                if ("undefined" === type || "boolean" === type) children = null;
                var invokeCallback = !1;
                if (null === children) invokeCallback = !0;
                else
                  switch (type) {
                    case "bigint":
                    case "string":
                    case "number":
                      invokeCallback = !0;
                      break;
                    case "object":
                      switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          invokeCallback = !0;
                          break;
                        case REACT_LAZY_TYPE:
                          return (
                            (invokeCallback = children._init),
                            mapIntoArray(
                              invokeCallback(children._payload),
                              array,
                              escapedPrefix,
                              nameSoFar,
                              callback,
                            )
                          );
                      }
                  }
                if (invokeCallback) {
                  invokeCallback = children;
                  callback = callback(invokeCallback);
                  var childKey =
                    "" === nameSoFar
                      ? "." + getElementKey(invokeCallback, 0)
                      : nameSoFar;
                  isArrayImpl(callback)
                    ? ((escapedPrefix = ""),
                      null != childKey &&
                        (escapedPrefix =
                          childKey.replace(userProvidedKeyEscapeRegex, "$&/") +
                          "/"),
                      mapIntoArray(
                        callback,
                        array,
                        escapedPrefix,
                        "",
                        function (c) {
                          return c;
                        },
                      ))
                    : null != callback &&
                      (isValidElement(callback) &&
                        (null != callback.key &&
                          ((invokeCallback &&
                            invokeCallback.key === callback.key) ||
                            checkKeyStringCoercion(callback.key)),
                        (escapedPrefix = cloneAndReplaceKey(
                          callback,
                          escapedPrefix +
                            (null == callback.key ||
                            (invokeCallback &&
                              invokeCallback.key === callback.key)
                              ? ""
                              : ("" + callback.key).replace(
                                  userProvidedKeyEscapeRegex,
                                  "$&/",
                                ) + "/") +
                            childKey,
                        )),
                        "" !== nameSoFar &&
                          null != invokeCallback &&
                          isValidElement(invokeCallback) &&
                          null == invokeCallback.key &&
                          invokeCallback._store &&
                          !invokeCallback._store.validated &&
                          (escapedPrefix._store.validated = 2),
                        (callback = escapedPrefix)),
                      array.push(callback));
                  return 1;
                }
                invokeCallback = 0;
                childKey = "" === nameSoFar ? "." : nameSoFar + ":";
                if (isArrayImpl(children))
                  for (var i = 0; i < children.length; i++)
                    (nameSoFar = children[i]),
                      (type = childKey + getElementKey(nameSoFar, i)),
                      (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array,
                        escapedPrefix,
                        type,
                        callback,
                      ));
                else if (
                  ((i = getIteratorFn(children)), "function" === typeof i)
                )
                  for (
                    i === children.entries &&
                      (didWarnAboutMaps ||
                        console.warn(
                          "Using Maps as children is not supported. Use an array of keyed ReactElements instead.",
                        ),
                      (didWarnAboutMaps = !0)),
                      children = i.call(children),
                      i = 0;
                    !(nameSoFar = children.next()).done;

                  )
                    (nameSoFar = nameSoFar.value),
                      (type = childKey + getElementKey(nameSoFar, i++)),
                      (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array,
                        escapedPrefix,
                        type,
                        callback,
                      ));
                else if ("object" === type) {
                  if ("function" === typeof children.then)
                    return mapIntoArray(
                      resolveThenable(children),
                      array,
                      escapedPrefix,
                      nameSoFar,
                      callback,
                    );
                  array = String(children);
                  throw Error(
                    "Objects are not valid as a React child (found: " +
                      ("[object Object]" === array
                        ? "object with keys {" +
                          Object.keys(children).join(", ") +
                          "}"
                        : array) +
                      "). If you meant to render a collection of children, use an array instead.",
                  );
                }
                return invokeCallback;
              }
              function mapChildren(children, func, context) {
                if (null == children) return children;
                var result = [],
                  count = 0;
                mapIntoArray(children, result, "", "", function (child) {
                  return func.call(context, child, count++);
                });
                return result;
              }
              function lazyInitializer(payload) {
                if (-1 === payload._status) {
                  var ctor = payload._result;
                  ctor = ctor();
                  ctor.then(
                    function (moduleObject) {
                      if (0 === payload._status || -1 === payload._status)
                        (payload._status = 1), (payload._result = moduleObject);
                    },
                    function (error) {
                      if (0 === payload._status || -1 === payload._status)
                        (payload._status = 2), (payload._result = error);
                    },
                  );
                  -1 === payload._status &&
                    ((payload._status = 0), (payload._result = ctor));
                }
                if (1 === payload._status)
                  return (
                    (ctor = payload._result),
                    void 0 === ctor &&
                      console.error(
                        "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
                        ctor,
                      ),
                    "default" in ctor ||
                      console.error(
                        "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                        ctor,
                      ),
                    ctor.default
                  );
                throw payload._result;
              }
              function resolveDispatcher() {
                var dispatcher = ReactSharedInternals.H;
                null === dispatcher &&
                  console.error(
                    "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.",
                  );
                return dispatcher;
              }
              function noop() {}
              function enqueueTask(task) {
                if (null === enqueueTaskImpl)
                  try {
                    var requireString = ("require" + Math.random()).slice(0, 7);
                    enqueueTaskImpl = (module && module[requireString]).call(
                      module,
                      "timers",
                    ).setImmediate;
                  } catch (_err) {
                    enqueueTaskImpl = function (callback) {
                      !1 === didWarnAboutMessageChannel &&
                        ((didWarnAboutMessageChannel = !0),
                        "undefined" === typeof MessageChannel &&
                          console.error(
                            "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.",
                          ));
                      var channel = new MessageChannel();
                      channel.port1.onmessage = callback;
                      channel.port2.postMessage(void 0);
                    };
                  }
                return enqueueTaskImpl(task);
              }
              function aggregateErrors(errors) {
                return 1 < errors.length && "function" === typeof AggregateError
                  ? new AggregateError(errors)
                  : errors[0];
              }
              function popActScope(prevActQueue, prevActScopeDepth) {
                prevActScopeDepth !== actScopeDepth - 1 &&
                  console.error(
                    "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ",
                  );
                actScopeDepth = prevActScopeDepth;
              }
              function recursivelyFlushAsyncActWork(
                returnValue,
                resolve,
                reject,
              ) {
                var queue = ReactSharedInternals.actQueue;
                if (null !== queue)
                  if (0 !== queue.length)
                    try {
                      flushActQueue(queue);
                      enqueueTask(function () {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject,
                        );
                      });
                      return;
                    } catch (error) {
                      ReactSharedInternals.thrownErrors.push(error);
                    }
                  else ReactSharedInternals.actQueue = null;
                0 < ReactSharedInternals.thrownErrors.length
                  ? ((queue = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    reject(queue))
                  : resolve(returnValue);
              }
              function flushActQueue(queue) {
                if (!isFlushing) {
                  isFlushing = !0;
                  var i = 0;
                  try {
                    for (; i < queue.length; i++) {
                      var callback = queue[i];
                      do {
                        ReactSharedInternals.didUsePromise = !1;
                        var continuation = callback(!1);
                        if (null !== continuation) {
                          if (ReactSharedInternals.didUsePromise) {
                            queue[i] = callback;
                            queue.splice(0, i);
                            return;
                          }
                          callback = continuation;
                        } else break;
                      } while (1);
                    }
                    queue.length = 0;
                  } catch (error) {
                    queue.splice(0, i + 1),
                      ReactSharedInternals.thrownErrors.push(error);
                  } finally {
                    isFlushing = !1;
                  }
                }
              }
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
                  Error(),
                );
              var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
                didWarnStateUpdateForUnmountedComponent = {},
                ReactNoopUpdateQueue = {
                  isMounted: function () {
                    return !1;
                  },
                  enqueueForceUpdate: function (publicInstance) {
                    warnNoop(publicInstance, "forceUpdate");
                  },
                  enqueueReplaceState: function (publicInstance) {
                    warnNoop(publicInstance, "replaceState");
                  },
                  enqueueSetState: function (publicInstance) {
                    warnNoop(publicInstance, "setState");
                  },
                },
                assign = Object.assign,
                emptyObject = {};
              Object.freeze(emptyObject);
              Component.prototype.isReactComponent = {};
              Component.prototype.setState = function (partialState, callback) {
                if (
                  "object" !== typeof partialState &&
                  "function" !== typeof partialState &&
                  null != partialState
                )
                  throw Error(
                    "takes an object of state variables to update or a function which returns an object of state variables.",
                  );
                this.updater.enqueueSetState(
                  this,
                  partialState,
                  callback,
                  "setState",
                );
              };
              Component.prototype.forceUpdate = function (callback) {
                this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
              };
              var deprecatedAPIs = {
                  isMounted: [
                    "isMounted",
                    "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
                  ],
                  replaceState: [
                    "replaceState",
                    "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).",
                  ],
                },
                fnName;
              for (fnName in deprecatedAPIs)
                deprecatedAPIs.hasOwnProperty(fnName) &&
                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              ComponentDummy.prototype = Component.prototype;
              deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
              deprecatedAPIs.constructor = PureComponent;
              assign(deprecatedAPIs, Component.prototype);
              deprecatedAPIs.isPureReactComponent = !0;
              var isArrayImpl = Array.isArray,
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals = {
                  H: null,
                  A: null,
                  T: null,
                  S: null,
                  V: null,
                  actQueue: null,
                  isBatchingLegacy: !1,
                  didScheduleLegacyUpdate: !1,
                  didUsePromise: !1,
                  thrownErrors: [],
                  getCurrentStack: null,
                  recentlyCreatedOwnerStacks: 0,
                },
                hasOwnProperty = Object.prototype.hasOwnProperty,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              deprecatedAPIs = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = deprecatedAPIs[
                "react-stack-bottom-frame"
              ].bind(deprecatedAPIs, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutMaps = !1,
                userProvidedKeyEscapeRegex = /\/+/g,
                reportGlobalError =
                  "function" === typeof reportError
                    ? reportError
                    : function (error) {
                        if (
                          "object" === typeof window &&
                          "function" === typeof window.ErrorEvent
                        ) {
                          var event = new window.ErrorEvent("error", {
                            bubbles: !0,
                            cancelable: !0,
                            message:
                              "object" === typeof error &&
                              null !== error &&
                              "string" === typeof error.message
                                ? String(error.message)
                                : String(error),
                            error: error,
                          });
                          if (!window.dispatchEvent(event)) return;
                        } else if (
                          "object" ===
                            typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "default"
                            ] &&
                          "function" ===
                            typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                              "default"
                            ].emit
                        ) {
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                            "default"
                          ].emit("uncaughtException", error);
                          return;
                        }
                        console.error(error);
                      },
                didWarnAboutMessageChannel = !1,
                enqueueTaskImpl = null,
                actScopeDepth = 0,
                didWarnNoAwaitAct = !1,
                isFlushing = !1,
                queueSeveralMicrotasks =
                  "function" === typeof queueMicrotask
                    ? function (callback) {
                        queueMicrotask(function () {
                          return queueMicrotask(callback);
                        });
                      }
                    : enqueueTask;
              deprecatedAPIs = Object.freeze({
                __proto__: null,
                c: function (size) {
                  return resolveDispatcher().useMemoCache(size);
                },
              });
              exports.Children = {
                map: mapChildren,
                forEach: function (children, forEachFunc, forEachContext) {
                  mapChildren(
                    children,
                    function () {
                      forEachFunc.apply(this, arguments);
                    },
                    forEachContext,
                  );
                },
                count: function (children) {
                  var n = 0;
                  mapChildren(children, function () {
                    n++;
                  });
                  return n;
                },
                toArray: function (children) {
                  return (
                    mapChildren(children, function (child) {
                      return child;
                    }) || []
                  );
                },
                only: function (children) {
                  if (!isValidElement(children))
                    throw Error(
                      "React.Children.only expected to receive a single React element child.",
                    );
                  return children;
                },
              };
              exports.Component = Component;
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.Profiler = REACT_PROFILER_TYPE;
              exports.PureComponent = PureComponent;
              exports.StrictMode = REACT_STRICT_MODE_TYPE;
              exports.Suspense = REACT_SUSPENSE_TYPE;
              exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
                ReactSharedInternals;
              exports.__COMPILER_RUNTIME = deprecatedAPIs;
              exports.act = function (callback) {
                var prevActQueue = ReactSharedInternals.actQueue,
                  prevActScopeDepth = actScopeDepth;
                actScopeDepth++;
                var queue = (ReactSharedInternals.actQueue =
                    null !== prevActQueue ? prevActQueue : []),
                  didAwaitActCall = !1;
                try {
                  var result = callback();
                } catch (error) {
                  ReactSharedInternals.thrownErrors.push(error);
                }
                if (0 < ReactSharedInternals.thrownErrors.length)
                  throw (
                    (popActScope(prevActQueue, prevActScopeDepth),
                    (callback = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback)
                  );
                if (
                  null !== result &&
                  "object" === typeof result &&
                  "function" === typeof result.then
                ) {
                  var thenable = result;
                  queueSeveralMicrotasks(function () {
                    didAwaitActCall ||
                      didWarnNoAwaitAct ||
                      ((didWarnNoAwaitAct = !0),
                      console.error(
                        "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);",
                      ));
                  });
                  return {
                    then: function (resolve, reject) {
                      didAwaitActCall = !0;
                      thenable.then(
                        function (returnValue) {
                          popActScope(prevActQueue, prevActScopeDepth);
                          if (0 === prevActScopeDepth) {
                            try {
                              flushActQueue(queue),
                                enqueueTask(function () {
                                  return recursivelyFlushAsyncActWork(
                                    returnValue,
                                    resolve,
                                    reject,
                                  );
                                });
                            } catch (error$0) {
                              ReactSharedInternals.thrownErrors.push(error$0);
                            }
                            if (0 < ReactSharedInternals.thrownErrors.length) {
                              var _thrownError = aggregateErrors(
                                ReactSharedInternals.thrownErrors,
                              );
                              ReactSharedInternals.thrownErrors.length = 0;
                              reject(_thrownError);
                            }
                          } else resolve(returnValue);
                        },
                        function (error) {
                          popActScope(prevActQueue, prevActScopeDepth);
                          0 < ReactSharedInternals.thrownErrors.length
                            ? ((error = aggregateErrors(
                                ReactSharedInternals.thrownErrors,
                              )),
                              (ReactSharedInternals.thrownErrors.length = 0),
                              reject(error))
                            : reject(error);
                        },
                      );
                    },
                  };
                }
                var returnValue$jscomp$0 = result;
                popActScope(prevActQueue, prevActScopeDepth);
                0 === prevActScopeDepth &&
                  (flushActQueue(queue),
                  0 !== queue.length &&
                    queueSeveralMicrotasks(function () {
                      didAwaitActCall ||
                        didWarnNoAwaitAct ||
                        ((didWarnNoAwaitAct = !0),
                        console.error(
                          "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)",
                        ));
                    }),
                  (ReactSharedInternals.actQueue = null));
                if (0 < ReactSharedInternals.thrownErrors.length)
                  throw (
                    ((callback = aggregateErrors(
                      ReactSharedInternals.thrownErrors,
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback)
                  );
                return {
                  then: function (resolve, reject) {
                    didAwaitActCall = !0;
                    0 === prevActScopeDepth
                      ? ((ReactSharedInternals.actQueue = queue),
                        enqueueTask(function () {
                          return recursivelyFlushAsyncActWork(
                            returnValue$jscomp$0,
                            resolve,
                            reject,
                          );
                        }))
                      : resolve(returnValue$jscomp$0);
                  },
                };
              };
              exports.cache = function (fn) {
                return function () {
                  return fn.apply(null, arguments);
                };
              };
              exports.captureOwnerStack = function () {
                var getCurrentStack = ReactSharedInternals.getCurrentStack;
                return null === getCurrentStack ? null : getCurrentStack();
              };
              exports.cloneElement = function (element, config, children) {
                if (null === element || void 0 === element)
                  throw Error(
                    "The argument must be a React element, but you passed " +
                      element +
                      ".",
                  );
                var props = assign({}, element.props),
                  key = element.key,
                  owner = element._owner;
                if (null != config) {
                  var JSCompiler_inline_result;
                  a: {
                    if (
                      hasOwnProperty.call(config, "ref") &&
                      (JSCompiler_inline_result =
                        Object.getOwnPropertyDescriptor(config, "ref").get) &&
                      JSCompiler_inline_result.isReactWarning
                    ) {
                      JSCompiler_inline_result = !1;
                      break a;
                    }
                    JSCompiler_inline_result = void 0 !== config.ref;
                  }
                  JSCompiler_inline_result && (owner = getOwner());
                  hasValidKey(config) &&
                    (checkKeyStringCoercion(config.key),
                    (key = "" + config.key));
                  for (propName in config)
                    !hasOwnProperty.call(config, propName) ||
                      "key" === propName ||
                      "__self" === propName ||
                      "__source" === propName ||
                      ("ref" === propName && void 0 === config.ref) ||
                      (props[propName] = config[propName]);
                }
                var propName = arguments.length - 2;
                if (1 === propName) props.children = children;
                else if (1 < propName) {
                  JSCompiler_inline_result = Array(propName);
                  for (var i = 0; i < propName; i++)
                    JSCompiler_inline_result[i] = arguments[i + 2];
                  props.children = JSCompiler_inline_result;
                }
                props = ReactElement(
                  element.type,
                  key,
                  void 0,
                  void 0,
                  owner,
                  props,
                  element._debugStack,
                  element._debugTask,
                );
                for (key = 2; key < arguments.length; key++)
                  (owner = arguments[key]),
                    isValidElement(owner) &&
                      owner._store &&
                      (owner._store.validated = 1);
                return props;
              };
              exports.createContext = function (defaultValue) {
                defaultValue = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _currentValue: defaultValue,
                  _currentValue2: defaultValue,
                  _threadCount: 0,
                  Provider: null,
                  Consumer: null,
                };
                defaultValue.Provider = defaultValue;
                defaultValue.Consumer = {
                  $$typeof: REACT_CONSUMER_TYPE,
                  _context: defaultValue,
                };
                defaultValue._currentRenderer = null;
                defaultValue._currentRenderer2 = null;
                return defaultValue;
              };
              exports.createElement = function (type, config, children) {
                for (var i = 2; i < arguments.length; i++) {
                  var node = arguments[i];
                  isValidElement(node) &&
                    node._store &&
                    (node._store.validated = 1);
                }
                i = {};
                node = null;
                if (null != config)
                  for (propName in (didWarnAboutOldJSXRuntime ||
                    !("__self" in config) ||
                    "key" in config ||
                    ((didWarnAboutOldJSXRuntime = !0),
                    console.warn(
                      "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform",
                    )),
                  hasValidKey(config) &&
                    (checkKeyStringCoercion(config.key),
                    (node = "" + config.key)),
                  config))
                    hasOwnProperty.call(config, propName) &&
                      "key" !== propName &&
                      "__self" !== propName &&
                      "__source" !== propName &&
                      (i[propName] = config[propName]);
                var childrenLength = arguments.length - 2;
                if (1 === childrenLength) i.children = children;
                else if (1 < childrenLength) {
                  for (
                    var childArray = Array(childrenLength), _i = 0;
                    _i < childrenLength;
                    _i++
                  )
                    childArray[_i] = arguments[_i + 2];
                  Object.freeze && Object.freeze(childArray);
                  i.children = childArray;
                }
                if (type && type.defaultProps)
                  for (propName in ((childrenLength = type.defaultProps),
                  childrenLength))
                    void 0 === i[propName] &&
                      (i[propName] = childrenLength[propName]);
                node &&
                  defineKeyPropWarningGetter(
                    i,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                var propName =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return ReactElement(
                  type,
                  node,
                  void 0,
                  void 0,
                  getOwner(),
                  i,
                  propName
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  propName
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
              exports.createRef = function () {
                var refObject = {
                  current: null,
                };
                Object.seal(refObject);
                return refObject;
              };
              exports.forwardRef = function (render) {
                null != render && render.$$typeof === REACT_MEMO_TYPE
                  ? console.error(
                      "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).",
                    )
                  : "function" !== typeof render
                    ? console.error(
                        "forwardRef requires a render function but was given %s.",
                        null === render ? "null" : typeof render,
                      )
                    : 0 !== render.length &&
                      2 !== render.length &&
                      console.error(
                        "forwardRef render functions accept exactly two parameters: props and ref. %s",
                        1 === render.length
                          ? "Did you forget to use the ref parameter?"
                          : "Any additional parameter will be undefined.",
                      );
                null != render &&
                  null != render.defaultProps &&
                  console.error(
                    "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?",
                  );
                var elementType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render,
                  },
                  ownName;
                Object.defineProperty(elementType, "displayName", {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;
                    render.name ||
                      render.displayName ||
                      (Object.defineProperty(render, "name", {
                        value: name,
                      }),
                      (render.displayName = name));
                  },
                });
                return elementType;
              };
              exports.isValidElement = isValidElement;
              exports.lazy = function (ctor) {
                return {
                  $$typeof: REACT_LAZY_TYPE,
                  _payload: {
                    _status: -1,
                    _result: ctor,
                  },
                  _init: lazyInitializer,
                };
              };
              exports.memo = function (type, compare) {
                null == type &&
                  console.error(
                    "memo: The first argument must be a component. Instead received: %s",
                    null === type ? "null" : typeof type,
                  );
                compare = {
                  $$typeof: REACT_MEMO_TYPE,
                  type: type,
                  compare: void 0 === compare ? null : compare,
                };
                var ownName;
                Object.defineProperty(compare, "displayName", {
                  enumerable: !1,
                  configurable: !0,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;
                    type.name ||
                      type.displayName ||
                      (Object.defineProperty(type, "name", {
                        value: name,
                      }),
                      (type.displayName = name));
                  },
                });
                return compare;
              };
              exports.startTransition = function (scope) {
                var prevTransition = ReactSharedInternals.T,
                  currentTransition = {};
                ReactSharedInternals.T = currentTransition;
                currentTransition._updatedFibers = new Set();
                try {
                  var returnValue = scope(),
                    onStartTransitionFinish = ReactSharedInternals.S;
                  null !== onStartTransitionFinish &&
                    onStartTransitionFinish(currentTransition, returnValue);
                  "object" === typeof returnValue &&
                    null !== returnValue &&
                    "function" === typeof returnValue.then &&
                    returnValue.then(noop, reportGlobalError);
                } catch (error) {
                  reportGlobalError(error);
                } finally {
                  null === prevTransition &&
                    currentTransition._updatedFibers &&
                    ((scope = currentTransition._updatedFibers.size),
                    currentTransition._updatedFibers.clear(),
                    10 < scope &&
                      console.warn(
                        "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.",
                      )),
                    (ReactSharedInternals.T = prevTransition);
                }
              };
              exports.unstable_useCacheRefresh = function () {
                return resolveDispatcher().useCacheRefresh();
              };
              exports.use = function (usable) {
                return resolveDispatcher().use(usable);
              };
              exports.useActionState = function (
                action,
                initialState,
                permalink,
              ) {
                return resolveDispatcher().useActionState(
                  action,
                  initialState,
                  permalink,
                );
              };
              exports.useCallback = function (callback, deps) {
                return resolveDispatcher().useCallback(callback, deps);
              };
              exports.useContext = function (Context) {
                var dispatcher = resolveDispatcher();
                Context.$$typeof === REACT_CONSUMER_TYPE &&
                  console.error(
                    "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?",
                  );
                return dispatcher.useContext(Context);
              };
              exports.useDebugValue = function (value, formatterFn) {
                return resolveDispatcher().useDebugValue(value, formatterFn);
              };
              exports.useDeferredValue = function (value, initialValue) {
                return resolveDispatcher().useDeferredValue(
                  value,
                  initialValue,
                );
              };
              exports.useEffect = function (create, createDeps, update) {
                null == create &&
                  console.warn(
                    "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                var dispatcher = resolveDispatcher();
                if ("function" === typeof update)
                  throw Error(
                    "useEffect CRUD overload is not enabled in this build of React.",
                  );
                return dispatcher.useEffect(create, createDeps);
              };
              exports.useId = function () {
                return resolveDispatcher().useId();
              };
              exports.useImperativeHandle = function (ref, create, deps) {
                return resolveDispatcher().useImperativeHandle(
                  ref,
                  create,
                  deps,
                );
              };
              exports.useInsertionEffect = function (create, deps) {
                null == create &&
                  console.warn(
                    "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                return resolveDispatcher().useInsertionEffect(create, deps);
              };
              exports.useLayoutEffect = function (create, deps) {
                null == create &&
                  console.warn(
                    "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?",
                  );
                return resolveDispatcher().useLayoutEffect(create, deps);
              };
              exports.useMemo = function (create, deps) {
                return resolveDispatcher().useMemo(create, deps);
              };
              exports.useOptimistic = function (passthrough, reducer) {
                return resolveDispatcher().useOptimistic(passthrough, reducer);
              };
              exports.useReducer = function (reducer, initialArg, init) {
                return resolveDispatcher().useReducer(
                  reducer,
                  initialArg,
                  init,
                );
              };
              exports.useRef = function (initialValue) {
                return resolveDispatcher().useRef(initialValue);
              };
              exports.useState = function (initialState) {
                return resolveDispatcher().useState(initialState);
              };
              exports.useSyncExternalStore = function (
                subscribe,
                getSnapshot,
                getServerSnapshot,
              ) {
                return resolveDispatcher().useSyncExternalStore(
                  subscribe,
                  getSnapshot,
                  getServerSnapshot,
                );
              };
              exports.useTransition = function () {
                return resolveDispatcher().useTransition();
              };
              exports.version = "19.1.0";
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                  Error(),
                );
            })();
        }
      },
    "[project]/node_modules/react/index.js [client] (ecmascript)": function (
      __turbopack_context__,
    ) {
      var {
        g: global,
        __dirname,
        m: module,
        e: exports,
      } = __turbopack_context__;
      {
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
          );
        ("use strict");
        if (("TURBOPACK compile-time falsy", 0)) {
          ("TURBOPACK unreachable");
        } else {
          module.exports = __turbopack_context__.r(
            "[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)",
          );
        }
      }
    },
    "[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react-jsx-runtime.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function jsxDEVImpl(
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
                debugStack,
                debugTask,
              ) {
                var children = config.children;
                if (void 0 !== children)
                  if (isStaticChildren)
                    if (isArrayImpl(children)) {
                      for (
                        isStaticChildren = 0;
                        isStaticChildren < children.length;
                        isStaticChildren++
                      )
                        validateChildKeys(children[isStaticChildren]);
                      Object.freeze && Object.freeze(children);
                    } else
                      console.error(
                        "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.",
                      );
                  else validateChildKeys(children);
                if (hasOwnProperty.call(config, "key")) {
                  children = getComponentNameFromType(type);
                  var keys = Object.keys(config).filter(function (k) {
                    return "key" !== k;
                  });
                  isStaticChildren =
                    0 < keys.length
                      ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
                      : "{key: someKey}";
                  didWarnAboutKeySpread[children + isStaticChildren] ||
                    ((keys =
                      0 < keys.length
                        ? "{" + keys.join(": ..., ") + ": ...}"
                        : "{}"),
                    console.error(
                      'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
                      isStaticChildren,
                      children,
                      keys,
                      children,
                    ),
                    (didWarnAboutKeySpread[children + isStaticChildren] = !0));
                }
                children = null;
                void 0 !== maybeKey &&
                  (checkKeyStringCoercion(maybeKey),
                  (children = "" + maybeKey));
                hasValidKey(config) &&
                  (checkKeyStringCoercion(config.key),
                  (children = "" + config.key));
                if ("key" in config) {
                  maybeKey = {};
                  for (var propName in config)
                    "key" !== propName &&
                      (maybeKey[propName] = config[propName]);
                } else maybeKey = config;
                children &&
                  defineKeyPropWarningGetter(
                    maybeKey,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                return ReactElement(
                  type,
                  children,
                  self,
                  source,
                  getOwner(),
                  maybeKey,
                  debugStack,
                  debugTask,
                );
              }
              function validateChildKeys(node) {
                "object" === typeof node &&
                  null !== node &&
                  node.$$typeof === REACT_ELEMENT_TYPE &&
                  node._store &&
                  (node._store.validated = 1);
              }
              var React = __turbopack_context__.r(
                  "[project]/node_modules/react/index.js [client] (ecmascript)",
                ),
                REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals =
                  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                isArrayImpl = Array.isArray,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              React = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = React[
                "react-stack-bottom-frame"
              ].bind(React, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutKeySpread = {};
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.jsx = function (type, config, maybeKey, source, self) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  !1,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
              exports.jsxs = function (type, config, maybeKey, source, self) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  !0,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
            })();
        }
      },
    "[project]/node_modules/react/jsx-runtime.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * react-jsx-dev-runtime.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ("function" === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                  case REACT_ACTIVITY_TYPE:
                    return "Activity";
                }
                if ("object" === typeof type)
                  switch (
                    ("number" === typeof type.tag &&
                      console.error(
                        "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return "Portal";
                    case REACT_CONTEXT_TYPE:
                      return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || "Context") + ".Consumer"
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ""),
                        (type =
                          "" !== type
                            ? "ForwardRef(" + type + ")"
                            : "ForwardRef"));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || "Memo"
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ("function" === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
                    JSCompiler_inline_result$jscomp$0,
                  );
                  return testStringCoercion(value);
                }
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return "<>";
                if (
                  "object" === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return "<...>";
                try {
                  var name = getComponentNameFromType(type);
                  return name ? "<" + name + ">" : "<...>";
                } catch (x) {
                  return "<...>";
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error("react-stack-top-frame");
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    "key",
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
                      displayName,
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.",
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask,
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, "ref", {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, "validated", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, "_debugInfo", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, "_debugStack", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, "_debugTask", {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function jsxDEVImpl(
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
                debugStack,
                debugTask,
              ) {
                var children = config.children;
                if (void 0 !== children)
                  if (isStaticChildren)
                    if (isArrayImpl(children)) {
                      for (
                        isStaticChildren = 0;
                        isStaticChildren < children.length;
                        isStaticChildren++
                      )
                        validateChildKeys(children[isStaticChildren]);
                      Object.freeze && Object.freeze(children);
                    } else
                      console.error(
                        "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.",
                      );
                  else validateChildKeys(children);
                if (hasOwnProperty.call(config, "key")) {
                  children = getComponentNameFromType(type);
                  var keys = Object.keys(config).filter(function (k) {
                    return "key" !== k;
                  });
                  isStaticChildren =
                    0 < keys.length
                      ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
                      : "{key: someKey}";
                  didWarnAboutKeySpread[children + isStaticChildren] ||
                    ((keys =
                      0 < keys.length
                        ? "{" + keys.join(": ..., ") + ": ...}"
                        : "{}"),
                    console.error(
                      'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
                      isStaticChildren,
                      children,
                      keys,
                      children,
                    ),
                    (didWarnAboutKeySpread[children + isStaticChildren] = !0));
                }
                children = null;
                void 0 !== maybeKey &&
                  (checkKeyStringCoercion(maybeKey),
                  (children = "" + maybeKey));
                hasValidKey(config) &&
                  (checkKeyStringCoercion(config.key),
                  (children = "" + config.key));
                if ("key" in config) {
                  maybeKey = {};
                  for (var propName in config)
                    "key" !== propName &&
                      (maybeKey[propName] = config[propName]);
                } else maybeKey = config;
                children &&
                  defineKeyPropWarningGetter(
                    maybeKey,
                    "function" === typeof type
                      ? type.displayName || type.name || "Unknown"
                      : type,
                  );
                return ReactElement(
                  type,
                  children,
                  self,
                  source,
                  getOwner(),
                  maybeKey,
                  debugStack,
                  debugTask,
                );
              }
              function validateChildKeys(node) {
                "object" === typeof node &&
                  null !== node &&
                  node.$$typeof === REACT_ELEMENT_TYPE &&
                  node._store &&
                  (node._store.validated = 1);
              }
              var React = __turbopack_context__.r(
                  "[project]/node_modules/react/index.js [client] (ecmascript)",
                ),
                REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
                REACT_PORTAL_TYPE = Symbol.for("react.portal"),
                REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
                REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
                REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              Symbol.for("react.provider");
              var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
                REACT_CONTEXT_TYPE = Symbol.for("react.context"),
                REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
                REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
                REACT_MEMO_TYPE = Symbol.for("react.memo"),
                REACT_LAZY_TYPE = Symbol.for("react.lazy"),
                REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
                REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
                ReactSharedInternals =
                  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                isArrayImpl = Array.isArray,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              React = {
                "react-stack-bottom-frame": function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = React[
                "react-stack-bottom-frame"
              ].bind(React, UnknownOwner)();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutKeySpread = {};
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.jsxDEV = function (
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
              ) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  isStaticChildren,
                  source,
                  self,
                  trackActualOwner
                    ? Error("react-stack-top-frame")
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask,
                );
              };
            })();
        }
      },
    "[project]/node_modules/react/jsx-dev-runtime.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          /**
           * @license React
           * scheduler.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          "production" !== ("TURBOPACK compile-time value", "development") &&
            (function () {
              function performWorkUntilDeadline() {
                needsPaint = !1;
                if (isMessageLoopRunning) {
                  var currentTime = exports.unstable_now();
                  startTime = currentTime;
                  var hasMoreWork = !0;
                  try {
                    a: {
                      isHostCallbackScheduled = !1;
                      isHostTimeoutScheduled &&
                        ((isHostTimeoutScheduled = !1),
                        localClearTimeout(taskTimeoutID),
                        (taskTimeoutID = -1));
                      isPerformingWork = !0;
                      var previousPriorityLevel = currentPriorityLevel;
                      try {
                        b: {
                          advanceTimers(currentTime);
                          for (
                            currentTask = peek(taskQueue);
                            null !== currentTask &&
                            !(
                              currentTask.expirationTime > currentTime &&
                              shouldYieldToHost()
                            );

                          ) {
                            var callback = currentTask.callback;
                            if ("function" === typeof callback) {
                              currentTask.callback = null;
                              currentPriorityLevel = currentTask.priorityLevel;
                              var continuationCallback = callback(
                                currentTask.expirationTime <= currentTime,
                              );
                              currentTime = exports.unstable_now();
                              if ("function" === typeof continuationCallback) {
                                currentTask.callback = continuationCallback;
                                advanceTimers(currentTime);
                                hasMoreWork = !0;
                                break b;
                              }
                              currentTask === peek(taskQueue) && pop(taskQueue);
                              advanceTimers(currentTime);
                            } else pop(taskQueue);
                            currentTask = peek(taskQueue);
                          }
                          if (null !== currentTask) hasMoreWork = !0;
                          else {
                            var firstTimer = peek(timerQueue);
                            null !== firstTimer &&
                              requestHostTimeout(
                                handleTimeout,
                                firstTimer.startTime - currentTime,
                              );
                            hasMoreWork = !1;
                          }
                        }
                        break a;
                      } finally {
                        (currentTask = null),
                          (currentPriorityLevel = previousPriorityLevel),
                          (isPerformingWork = !1);
                      }
                      hasMoreWork = void 0;
                    }
                  } finally {
                    hasMoreWork
                      ? schedulePerformWorkUntilDeadline()
                      : (isMessageLoopRunning = !1);
                  }
                }
              }
              function push(heap, node) {
                var index = heap.length;
                heap.push(node);
                a: for (; 0 < index; ) {
                  var parentIndex = (index - 1) >>> 1,
                    parent = heap[parentIndex];
                  if (0 < compare(parent, node))
                    (heap[parentIndex] = node),
                      (heap[index] = parent),
                      (index = parentIndex);
                  else break a;
                }
              }
              function peek(heap) {
                return 0 === heap.length ? null : heap[0];
              }
              function pop(heap) {
                if (0 === heap.length) return null;
                var first = heap[0],
                  last = heap.pop();
                if (last !== first) {
                  heap[0] = last;
                  a: for (
                    var index = 0,
                      length = heap.length,
                      halfLength = length >>> 1;
                    index < halfLength;

                  ) {
                    var leftIndex = 2 * (index + 1) - 1,
                      left = heap[leftIndex],
                      rightIndex = leftIndex + 1,
                      right = heap[rightIndex];
                    if (0 > compare(left, last))
                      rightIndex < length && 0 > compare(right, left)
                        ? ((heap[index] = right),
                          (heap[rightIndex] = last),
                          (index = rightIndex))
                        : ((heap[index] = left),
                          (heap[leftIndex] = last),
                          (index = leftIndex));
                    else if (rightIndex < length && 0 > compare(right, last))
                      (heap[index] = right),
                        (heap[rightIndex] = last),
                        (index = rightIndex);
                    else break a;
                  }
                }
                return first;
              }
              function compare(a, b) {
                var diff = a.sortIndex - b.sortIndex;
                return 0 !== diff ? diff : a.id - b.id;
              }
              function advanceTimers(currentTime) {
                for (var timer = peek(timerQueue); null !== timer; ) {
                  if (null === timer.callback) pop(timerQueue);
                  else if (timer.startTime <= currentTime)
                    pop(timerQueue),
                      (timer.sortIndex = timer.expirationTime),
                      push(taskQueue, timer);
                  else break;
                  timer = peek(timerQueue);
                }
              }
              function handleTimeout(currentTime) {
                isHostTimeoutScheduled = !1;
                advanceTimers(currentTime);
                if (!isHostCallbackScheduled)
                  if (null !== peek(taskQueue))
                    (isHostCallbackScheduled = !0),
                      isMessageLoopRunning ||
                        ((isMessageLoopRunning = !0),
                        schedulePerformWorkUntilDeadline());
                  else {
                    var firstTimer = peek(timerQueue);
                    null !== firstTimer &&
                      requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime,
                      );
                  }
              }
              function shouldYieldToHost() {
                return needsPaint
                  ? !0
                  : exports.unstable_now() - startTime < frameInterval
                    ? !1
                    : !0;
              }
              function requestHostTimeout(callback, ms) {
                taskTimeoutID = localSetTimeout(function () {
                  callback(exports.unstable_now());
                }, ms);
              }
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
                  Error(),
                );
              exports.unstable_now = void 0;
              if (
                "object" === typeof performance &&
                "function" === typeof performance.now
              ) {
                var localPerformance = performance;
                exports.unstable_now = function () {
                  return localPerformance.now();
                };
              } else {
                var localDate = Date,
                  initialTime = localDate.now();
                exports.unstable_now = function () {
                  return localDate.now() - initialTime;
                };
              }
              var taskQueue = [],
                timerQueue = [],
                taskIdCounter = 1,
                currentTask = null,
                currentPriorityLevel = 3,
                isPerformingWork = !1,
                isHostCallbackScheduled = !1,
                isHostTimeoutScheduled = !1,
                needsPaint = !1,
                localSetTimeout =
                  "function" === typeof setTimeout ? setTimeout : null,
                localClearTimeout =
                  "function" === typeof clearTimeout ? clearTimeout : null,
                localSetImmediate =
                  "undefined" !== typeof setImmediate ? setImmediate : null,
                isMessageLoopRunning = !1,
                taskTimeoutID = -1,
                frameInterval = 5,
                startTime = -1;
              if ("function" === typeof localSetImmediate)
                var schedulePerformWorkUntilDeadline = function () {
                  localSetImmediate(performWorkUntilDeadline);
                };
              else if ("undefined" !== typeof MessageChannel) {
                var channel = new MessageChannel(),
                  port = channel.port2;
                channel.port1.onmessage = performWorkUntilDeadline;
                schedulePerformWorkUntilDeadline = function () {
                  port.postMessage(null);
                };
              } else
                schedulePerformWorkUntilDeadline = function () {
                  localSetTimeout(performWorkUntilDeadline, 0);
                };
              exports.unstable_IdlePriority = 5;
              exports.unstable_ImmediatePriority = 1;
              exports.unstable_LowPriority = 4;
              exports.unstable_NormalPriority = 3;
              exports.unstable_Profiling = null;
              exports.unstable_UserBlockingPriority = 2;
              exports.unstable_cancelCallback = function (task) {
                task.callback = null;
              };
              exports.unstable_forceFrameRate = function (fps) {
                0 > fps || 125 < fps
                  ? console.error(
                      "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported",
                    )
                  : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
              };
              exports.unstable_getCurrentPriorityLevel = function () {
                return currentPriorityLevel;
              };
              exports.unstable_next = function (eventHandler) {
                switch (currentPriorityLevel) {
                  case 1:
                  case 2:
                  case 3:
                    var priorityLevel = 3;
                    break;
                  default:
                    priorityLevel = currentPriorityLevel;
                }
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = priorityLevel;
                try {
                  return eventHandler();
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
              exports.unstable_requestPaint = function () {
                needsPaint = !0;
              };
              exports.unstable_runWithPriority = function (
                priorityLevel,
                eventHandler,
              ) {
                switch (priorityLevel) {
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                  default:
                    priorityLevel = 3;
                }
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = priorityLevel;
                try {
                  return eventHandler();
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
              exports.unstable_scheduleCallback = function (
                priorityLevel,
                callback,
                options,
              ) {
                var currentTime = exports.unstable_now();
                "object" === typeof options && null !== options
                  ? ((options = options.delay),
                    (options =
                      "number" === typeof options && 0 < options
                        ? currentTime + options
                        : currentTime))
                  : (options = currentTime);
                switch (priorityLevel) {
                  case 1:
                    var timeout = -1;
                    break;
                  case 2:
                    timeout = 250;
                    break;
                  case 5:
                    timeout = 1073741823;
                    break;
                  case 4:
                    timeout = 1e4;
                    break;
                  default:
                    timeout = 5e3;
                }
                timeout = options + timeout;
                priorityLevel = {
                  id: taskIdCounter++,
                  callback: callback,
                  priorityLevel: priorityLevel,
                  startTime: options,
                  expirationTime: timeout,
                  sortIndex: -1,
                };
                options > currentTime
                  ? ((priorityLevel.sortIndex = options),
                    push(timerQueue, priorityLevel),
                    null === peek(taskQueue) &&
                      priorityLevel === peek(timerQueue) &&
                      (isHostTimeoutScheduled
                        ? (localClearTimeout(taskTimeoutID),
                          (taskTimeoutID = -1))
                        : (isHostTimeoutScheduled = !0),
                      requestHostTimeout(handleTimeout, options - currentTime)))
                  : ((priorityLevel.sortIndex = timeout),
                    push(taskQueue, priorityLevel),
                    isHostCallbackScheduled ||
                      isPerformingWork ||
                      ((isHostCallbackScheduled = !0),
                      isMessageLoopRunning ||
                        ((isMessageLoopRunning = !0),
                        schedulePerformWorkUntilDeadline())));
                return priorityLevel;
              };
              exports.unstable_shouldYield = shouldYieldToHost;
              exports.unstable_wrapCallback = function (callback) {
                var parentPriorityLevel = currentPriorityLevel;
                return function () {
                  var previousPriorityLevel = currentPriorityLevel;
                  currentPriorityLevel = parentPriorityLevel;
                  try {
                    return callback.apply(this, arguments);
                  } finally {
                    currentPriorityLevel = previousPriorityLevel;
                  }
                };
              };
              "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                "function" ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                  Error(),
                );
            })();
        }
      },
    "[project]/node_modules/scheduler/index.js [client] (ecmascript)":
      function (__turbopack_context__) {
        var {
          g: global,
          __dirname,
          m: module,
          e: exports,
        } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)",
            );
          ("use strict");
          if (("TURBOPACK compile-time falsy", 0)) {
            ("TURBOPACK unreachable");
          } else {
            module.exports = __turbopack_context__.r(
              "[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)",
            );
          }
        }
      },
    "[project]/node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/index.ts
          __turbopack_context__.s({
            __raf: () => __raf,
            raf: () => raf,
          });
          var updateQueue = makeQueue();
          var raf = (fn) => schedule(fn, updateQueue);
          var writeQueue = makeQueue();
          raf.write = (fn) => schedule(fn, writeQueue);
          var onStartQueue = makeQueue();
          raf.onStart = (fn) => schedule(fn, onStartQueue);
          var onFrameQueue = makeQueue();
          raf.onFrame = (fn) => schedule(fn, onFrameQueue);
          var onFinishQueue = makeQueue();
          raf.onFinish = (fn) => schedule(fn, onFinishQueue);
          var timeouts = [];
          raf.setTimeout = (handler, ms) => {
            const time = raf.now() + ms;
            const cancel = () => {
              const i = timeouts.findIndex((t) => t.cancel == cancel);
              if (~i) timeouts.splice(i, 1);
              pendingCount -= ~i ? 1 : 0;
            };
            const timeout = {
              time,
              handler,
              cancel,
            };
            timeouts.splice(findTimeout(time), 0, timeout);
            pendingCount += 1;
            start();
            return timeout;
          };
          var findTimeout = (time) =>
            ~(~timeouts.findIndex((t) => t.time > time) || ~timeouts.length);
          raf.cancel = (fn) => {
            onStartQueue.delete(fn);
            onFrameQueue.delete(fn);
            onFinishQueue.delete(fn);
            updateQueue.delete(fn);
            writeQueue.delete(fn);
          };
          raf.sync = (fn) => {
            sync = true;
            raf.batchedUpdates(fn);
            sync = false;
          };
          raf.throttle = (fn) => {
            let lastArgs;
            function queuedFn() {
              try {
                fn(...lastArgs);
              } finally {
                lastArgs = null;
              }
            }
            function throttled(...args) {
              lastArgs = args;
              raf.onStart(queuedFn);
            }
            throttled.handler = fn;
            throttled.cancel = () => {
              onStartQueue.delete(queuedFn);
              lastArgs = null;
            };
            return throttled;
          };
          var nativeRaf =
            typeof window != "undefined"
              ? window.requestAnimationFrame // eslint-disable-next-line @typescript-eslint/no-empty-function
              : () => {};
          raf.use = (impl) => (nativeRaf = impl);
          raf.now =
            typeof performance != "undefined"
              ? () => performance.now()
              : Date.now;
          raf.batchedUpdates = (fn) => fn();
          raf.catch = console.error;
          raf.frameLoop = "always";
          raf.advance = () => {
            if (raf.frameLoop !== "demand") {
              console.warn(
                "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand",
              );
            } else {
              update();
            }
          };
          var ts = -1;
          var pendingCount = 0;
          var sync = false;
          function schedule(fn, queue) {
            if (sync) {
              queue.delete(fn);
              fn(0);
            } else {
              queue.add(fn);
              start();
            }
          }
          function start() {
            if (ts < 0) {
              ts = 0;
              if (raf.frameLoop !== "demand") {
                nativeRaf(loop);
              }
            }
          }
          function stop() {
            ts = -1;
          }
          function loop() {
            if (~ts) {
              nativeRaf(loop);
              raf.batchedUpdates(update);
            }
          }
          function update() {
            const prevTs = ts;
            ts = raf.now();
            const count = findTimeout(ts);
            if (count) {
              eachSafely(timeouts.splice(0, count), (t) => t.handler());
              pendingCount -= count;
            }
            if (!pendingCount) {
              stop();
              return;
            }
            onStartQueue.flush();
            updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
            onFrameQueue.flush();
            writeQueue.flush();
            onFinishQueue.flush();
          }
          function makeQueue() {
            let next = /* @__PURE__ */ new Set();
            let current = next;
            return {
              add(fn) {
                pendingCount += current == next && !next.has(fn) ? 1 : 0;
                next.add(fn);
              },
              delete(fn) {
                pendingCount -= current == next && next.has(fn) ? 1 : 0;
                return next.delete(fn);
              },
              flush(arg) {
                if (current.size) {
                  next = /* @__PURE__ */ new Set();
                  pendingCount -= current.size;
                  eachSafely(current, (fn) => fn(arg) && next.add(fn));
                  pendingCount += next.size;
                  current = next;
                }
              },
            };
          }
          function eachSafely(values, each) {
            values.forEach((value) => {
              try {
                each(value);
              } catch (e) {
                raf.catch(e);
              }
            });
          }
          var __raf = {
            /** The number of pending tasks */ count() {
              return pendingCount;
            },
            /** Whether there's a raf update loop running */ isRunning() {
              return ts >= 0;
            },
            /** Clear internal state. Never call from update loop! */ clear() {
              ts = -1;
              timeouts = [];
              onStartQueue = makeQueue();
              updateQueue = makeQueue();
              onFrameQueue = makeQueue();
              writeQueue = makeQueue();
              onFinishQueue = makeQueue();
              pendingCount = 0;
            },
          };
          //# sourceMappingURL=react-spring_rafz.modern.mjs.map
        }
      },
    "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <locals>":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({
            FluidValue: () => FluidValue,
            Globals: () => globals_exports,
            addFluidObserver: () => addFluidObserver,
            callFluidObserver: () => callFluidObserver,
            callFluidObservers: () => callFluidObservers,
            clamp: () => clamp,
            colorToRgba: () => colorToRgba,
            colors: () => colors2,
            createInterpolator: () => createInterpolator,
            createStringInterpolator: () => createStringInterpolator2,
            defineHidden: () => defineHidden,
            deprecateDirectCall: () => deprecateDirectCall,
            deprecateInterpolate: () => deprecateInterpolate,
            each: () => each,
            eachProp: () => eachProp,
            easings: () => easings,
            flush: () => flush,
            flushCalls: () => flushCalls,
            frameLoop: () => frameLoop,
            getFluidObservers: () => getFluidObservers,
            getFluidValue: () => getFluidValue,
            hasFluidValue: () => hasFluidValue,
            hex3: () => hex3,
            hex4: () => hex4,
            hex6: () => hex6,
            hex8: () => hex8,
            hsl: () => hsl,
            hsla: () => hsla,
            is: () => is,
            isAnimatedString: () => isAnimatedString,
            isEqual: () => isEqual,
            isSSR: () => isSSR,
            noop: () => noop,
            onResize: () => onResize,
            onScroll: () => onScroll,
            once: () => once,
            prefix: () => prefix,
            removeFluidObserver: () => removeFluidObserver,
            rgb: () => rgb,
            rgba: () => rgba,
            setFluidGetter: () => setFluidGetter,
            toArray: () => toArray,
            useConstant: () => useConstant,
            useForceUpdate: () => useForceUpdate,
            useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect,
            useMemoOne: () => useMemoOne,
            useOnce: () => useOnce,
            usePrev: () => usePrev,
            useReducedMotion: () => useReducedMotion,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs [client] (ecmascript)",
            );
          // src/hooks/useConstant.ts
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/react/index.js [client] (ecmascript)",
            );
          var __defProp = Object.defineProperty;
          var __export = (target, all) => {
            for (var name in all)
              __defProp(target, name, {
                get: all[name],
                enumerable: true,
              });
          };
          // src/globals.ts
          var globals_exports = {};
          __export(globals_exports, {
            assign: () => assign,
            colors: () => colors,
            createStringInterpolator: () => createStringInterpolator,
            skipAnimation: () => skipAnimation,
            to: () => to,
            willAdvance: () => willAdvance,
          });
          // src/helpers.ts
          function noop() {}
          var defineHidden = (obj, key, value) =>
            Object.defineProperty(obj, key, {
              value,
              writable: true,
              configurable: true,
            });
          var is = {
            arr: Array.isArray,
            obj: (a) => !!a && a.constructor.name === "Object",
            fun: (a) => typeof a === "function",
            str: (a) => typeof a === "string",
            num: (a) => typeof a === "number",
            und: (a) => a === void 0,
          };
          function isEqual(a, b) {
            if (is.arr(a)) {
              if (!is.arr(b) || a.length !== b.length) return false;
              for (let i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) return false;
              }
              return true;
            }
            return a === b;
          }
          var each = (obj, fn) => obj.forEach(fn);
          function eachProp(obj, fn, ctx) {
            if (is.arr(obj)) {
              for (let i = 0; i < obj.length; i++) {
                fn.call(ctx, obj[i], `${i}`);
              }
              return;
            }
            for (const key in obj) {
              if (obj.hasOwnProperty(key)) {
                fn.call(ctx, obj[key], key);
              }
            }
          }
          var toArray = (a) => (is.und(a) ? [] : is.arr(a) ? a : [a]);
          function flush(queue, iterator) {
            if (queue.size) {
              const items = Array.from(queue);
              queue.clear();
              each(items, iterator);
            }
          }
          var flushCalls = (queue, ...args) =>
            flush(queue, (fn) => fn(...args));
          var isSSR = () =>
            typeof window === "undefined" ||
            !window.navigator ||
            /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
          // src/globals.ts
          var createStringInterpolator;
          var to;
          var colors = null;
          var skipAnimation = false;
          var willAdvance = noop;
          var assign = (globals) => {
            if (globals.to) to = globals.to;
            if (globals.now)
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "raf"
              ].now = globals.now;
            if (globals.colors !== void 0) colors = globals.colors;
            if (globals.skipAnimation != null)
              skipAnimation = globals.skipAnimation;
            if (globals.createStringInterpolator)
              createStringInterpolator = globals.createStringInterpolator;
            if (globals.requestAnimationFrame)
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "raf"
              ].use(globals.requestAnimationFrame);
            if (globals.batchedUpdates)
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "raf"
              ].batchedUpdates = globals.batchedUpdates;
            if (globals.willAdvance) willAdvance = globals.willAdvance;
            if (globals.frameLoop)
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "raf"
              ].frameLoop = globals.frameLoop;
          };
          var startQueue = /* @__PURE__ */ new Set();
          var currentFrame = [];
          var prevFrame = [];
          var priority = 0;
          var frameLoop = {
            get idle() {
              return !startQueue.size && !currentFrame.length;
            },
            /** Advance the given animation on every frame until idle. */ start(
              animation,
            ) {
              if (priority > animation.priority) {
                startQueue.add(animation);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "raf"
                ].onStart(flushStartQueue);
              } else {
                startSafely(animation);
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "raf"
                ])(advance);
              }
            },
            /** Advance all animations by the given time. */ advance,
            /** Call this when an animation's priority changes. */ sort(
              animation,
            ) {
              if (priority) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "raf"
                ].onFrame(() => frameLoop.sort(animation));
              } else {
                const prevIndex = currentFrame.indexOf(animation);
                if (~prevIndex) {
                  currentFrame.splice(prevIndex, 1);
                  startUnsafely(animation);
                }
              }
            },
            /**
             * Clear all animations. For testing purposes.
             *
             * ☠️ Never call this from within the frameloop.
             */ clear() {
              currentFrame = [];
              startQueue.clear();
            },
          };
          function flushStartQueue() {
            startQueue.forEach(startSafely);
            startQueue.clear();
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "raf"
            ])(advance);
          }
          function startSafely(animation) {
            if (!currentFrame.includes(animation)) startUnsafely(animation);
          }
          function startUnsafely(animation) {
            currentFrame.splice(
              findIndex(
                currentFrame,
                (other) => other.priority > animation.priority,
              ),
              0,
              animation,
            );
          }
          function advance(dt) {
            const nextFrame = prevFrame;
            for (let i = 0; i < currentFrame.length; i++) {
              const animation = currentFrame[i];
              priority = animation.priority;
              if (!animation.idle) {
                willAdvance(animation);
                animation.advance(dt);
                if (!animation.idle) {
                  nextFrame.push(animation);
                }
              }
            }
            priority = 0;
            prevFrame = currentFrame;
            prevFrame.length = 0;
            currentFrame = nextFrame;
            return currentFrame.length > 0;
          }
          function findIndex(arr, test) {
            const index = arr.findIndex(test);
            return index < 0 ? arr.length : index;
          }
          // src/clamp.ts
          var clamp = (min, max, v) => Math.min(Math.max(v, min), max);
          // src/colors.ts
          var colors2 = {
            transparent: 0,
            aliceblue: 4042850303,
            antiquewhite: 4209760255,
            aqua: 16777215,
            aquamarine: 2147472639,
            azure: 4043309055,
            beige: 4126530815,
            bisque: 4293182719,
            black: 255,
            blanchedalmond: 4293643775,
            blue: 65535,
            blueviolet: 2318131967,
            brown: 2771004159,
            burlywood: 3736635391,
            burntsienna: 3934150143,
            cadetblue: 1604231423,
            chartreuse: 2147418367,
            chocolate: 3530104575,
            coral: 4286533887,
            cornflowerblue: 1687547391,
            cornsilk: 4294499583,
            crimson: 3692313855,
            cyan: 16777215,
            darkblue: 35839,
            darkcyan: 9145343,
            darkgoldenrod: 3095792639,
            darkgray: 2846468607,
            darkgreen: 6553855,
            darkgrey: 2846468607,
            darkkhaki: 3182914559,
            darkmagenta: 2332068863,
            darkolivegreen: 1433087999,
            darkorange: 4287365375,
            darkorchid: 2570243327,
            darkred: 2332033279,
            darksalmon: 3918953215,
            darkseagreen: 2411499519,
            darkslateblue: 1211993087,
            darkslategray: 793726975,
            darkslategrey: 793726975,
            darkturquoise: 13554175,
            darkviolet: 2483082239,
            deeppink: 4279538687,
            deepskyblue: 12582911,
            dimgray: 1768516095,
            dimgrey: 1768516095,
            dodgerblue: 512819199,
            firebrick: 2988581631,
            floralwhite: 4294635775,
            forestgreen: 579543807,
            fuchsia: 4278255615,
            gainsboro: 3705462015,
            ghostwhite: 4177068031,
            gold: 4292280575,
            goldenrod: 3668254975,
            gray: 2155905279,
            green: 8388863,
            greenyellow: 2919182335,
            grey: 2155905279,
            honeydew: 4043305215,
            hotpink: 4285117695,
            indianred: 3445382399,
            indigo: 1258324735,
            ivory: 4294963455,
            khaki: 4041641215,
            lavender: 3873897215,
            lavenderblush: 4293981695,
            lawngreen: 2096890111,
            lemonchiffon: 4294626815,
            lightblue: 2916673279,
            lightcoral: 4034953471,
            lightcyan: 3774873599,
            lightgoldenrodyellow: 4210742015,
            lightgray: 3553874943,
            lightgreen: 2431553791,
            lightgrey: 3553874943,
            lightpink: 4290167295,
            lightsalmon: 4288707327,
            lightseagreen: 548580095,
            lightskyblue: 2278488831,
            lightslategray: 2005441023,
            lightslategrey: 2005441023,
            lightsteelblue: 2965692159,
            lightyellow: 4294959359,
            lime: 16711935,
            limegreen: 852308735,
            linen: 4210091775,
            magenta: 4278255615,
            maroon: 2147483903,
            mediumaquamarine: 1724754687,
            mediumblue: 52735,
            mediumorchid: 3126187007,
            mediumpurple: 2473647103,
            mediumseagreen: 1018393087,
            mediumslateblue: 2070474495,
            mediumspringgreen: 16423679,
            mediumturquoise: 1221709055,
            mediumvioletred: 3340076543,
            midnightblue: 421097727,
            mintcream: 4127193855,
            mistyrose: 4293190143,
            moccasin: 4293178879,
            navajowhite: 4292783615,
            navy: 33023,
            oldlace: 4260751103,
            olive: 2155872511,
            olivedrab: 1804477439,
            orange: 4289003775,
            orangered: 4282712319,
            orchid: 3664828159,
            palegoldenrod: 4008225535,
            palegreen: 2566625535,
            paleturquoise: 2951671551,
            palevioletred: 3681588223,
            papayawhip: 4293907967,
            peachpuff: 4292524543,
            peru: 3448061951,
            pink: 4290825215,
            plum: 3718307327,
            powderblue: 2967529215,
            purple: 2147516671,
            rebeccapurple: 1714657791,
            red: 4278190335,
            rosybrown: 3163525119,
            royalblue: 1097458175,
            saddlebrown: 2336560127,
            salmon: 4202722047,
            sandybrown: 4104413439,
            seagreen: 780883967,
            seashell: 4294307583,
            sienna: 2689740287,
            silver: 3233857791,
            skyblue: 2278484991,
            slateblue: 1784335871,
            slategray: 1887473919,
            slategrey: 1887473919,
            snow: 4294638335,
            springgreen: 16744447,
            steelblue: 1182971135,
            tan: 3535047935,
            teal: 8421631,
            thistle: 3636451583,
            tomato: 4284696575,
            turquoise: 1088475391,
            violet: 4001558271,
            wheat: 4125012991,
            white: 4294967295,
            whitesmoke: 4126537215,
            yellow: 4294902015,
            yellowgreen: 2597139199,
          };
          // src/colorMatchers.ts
          var NUMBER = "[-+]?\\d*\\.?\\d+";
          var PERCENTAGE = NUMBER + "%";
          function call(...parts) {
            return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
          }
          var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
          var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
          var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
          var hsla = new RegExp(
            "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER),
          );
          var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
          var hex4 =
            /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
          var hex6 = /^#([0-9a-fA-F]{6})$/;
          var hex8 = /^#([0-9a-fA-F]{8})$/;
          // src/normalizeColor.ts
          function normalizeColor(color) {
            let match;
            if (typeof color === "number") {
              return color >>> 0 === color && color >= 0 && color <= 4294967295
                ? color
                : null;
            }
            if ((match = hex6.exec(color)))
              return parseInt(match[1] + "ff", 16) >>> 0;
            if (colors && colors[color] !== void 0) {
              return colors[color];
            }
            if ((match = rgb.exec(color))) {
              return (
                ((parse255(match[1]) << 24) | // r
                  (parse255(match[2]) << 16) | // g
                  (parse255(match[3]) << 8) | // b
                  255) >>> // a
                0
              );
            }
            if ((match = rgba.exec(color))) {
              return (
                ((parse255(match[1]) << 24) | // r
                  (parse255(match[2]) << 16) | // g
                  (parse255(match[3]) << 8) | // b
                  parse1(match[4])) >>> // a
                0
              );
            }
            if ((match = hex3.exec(color))) {
              return (
                parseInt(
                  match[1] +
                    match[1] + // r
                    match[2] +
                    match[2] + // g
                    match[3] +
                    match[3] + // b
                    "ff", // a
                  16,
                ) >>> 0
              );
            }
            if ((match = hex8.exec(color))) return parseInt(match[1], 16) >>> 0;
            if ((match = hex4.exec(color))) {
              return (
                parseInt(
                  match[1] +
                    match[1] + // r
                    match[2] +
                    match[2] + // g
                    match[3] +
                    match[3] + // b
                    match[4] +
                    match[4], // a
                  16,
                ) >>> 0
              );
            }
            if ((match = hsl.exec(color))) {
              return (
                (hslToRgb(
                  parse360(match[1]), // h
                  parsePercentage(match[2]), // s
                  parsePercentage(match[3]),
                ) |
                  255) >>> // a
                0
              );
            }
            if ((match = hsla.exec(color))) {
              return (
                (hslToRgb(
                  parse360(match[1]), // h
                  parsePercentage(match[2]), // s
                  parsePercentage(match[3]),
                ) |
                  parse1(match[4])) >>> // a
                0
              );
            }
            return null;
          }
          function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
          }
          function hslToRgb(h, s, l) {
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            const r = hue2rgb(p, q, h + 1 / 3);
            const g = hue2rgb(p, q, h);
            const b = hue2rgb(p, q, h - 1 / 3);
            return (
              (Math.round(r * 255) << 24) |
              (Math.round(g * 255) << 16) |
              (Math.round(b * 255) << 8)
            );
          }
          function parse255(str) {
            const int = parseInt(str, 10);
            if (int < 0) return 0;
            if (int > 255) return 255;
            return int;
          }
          function parse360(str) {
            const int = parseFloat(str);
            return (((int % 360) + 360) % 360) / 360;
          }
          function parse1(str) {
            const num = parseFloat(str);
            if (num < 0) return 0;
            if (num > 1) return 255;
            return Math.round(num * 255);
          }
          function parsePercentage(str) {
            const int = parseFloat(str);
            if (int < 0) return 0;
            if (int > 100) return 1;
            return int / 100;
          }
          // src/colorToRgba.ts
          function colorToRgba(input) {
            let int32Color = normalizeColor(input);
            if (int32Color === null) return input;
            int32Color = int32Color || 0;
            const r = (int32Color & 4278190080) >>> 24;
            const g = (int32Color & 16711680) >>> 16;
            const b = (int32Color & 65280) >>> 8;
            const a = (int32Color & 255) / 255;
            return `rgba(${r}, ${g}, ${b}, ${a})`;
          }
          // src/createInterpolator.ts
          var createInterpolator = (range, output, extrapolate) => {
            if (is.fun(range)) {
              return range;
            }
            if (is.arr(range)) {
              return createInterpolator({
                range,
                output,
                extrapolate,
              });
            }
            if (is.str(range.output[0])) {
              return createStringInterpolator(range);
            }
            const config = range;
            const outputRange = config.output;
            const inputRange = config.range || [0, 1];
            const extrapolateLeft =
              config.extrapolateLeft || config.extrapolate || "extend";
            const extrapolateRight =
              config.extrapolateRight || config.extrapolate || "extend";
            const easing = config.easing || ((t) => t);
            return (input) => {
              const range2 = findRange(input, inputRange);
              return interpolate(
                input,
                inputRange[range2],
                inputRange[range2 + 1],
                outputRange[range2],
                outputRange[range2 + 1],
                easing,
                extrapolateLeft,
                extrapolateRight,
                config.map,
              );
            };
          };
          function interpolate(
            input,
            inputMin,
            inputMax,
            outputMin,
            outputMax,
            easing,
            extrapolateLeft,
            extrapolateRight,
            map,
          ) {
            let result = map ? map(input) : input;
            if (result < inputMin) {
              if (extrapolateLeft === "identity") return result;
              else if (extrapolateLeft === "clamp") result = inputMin;
            }
            if (result > inputMax) {
              if (extrapolateRight === "identity") return result;
              else if (extrapolateRight === "clamp") result = inputMax;
            }
            if (outputMin === outputMax) return outputMin;
            if (inputMin === inputMax)
              return input <= inputMin ? outputMin : outputMax;
            if (inputMin === -Infinity) result = -result;
            else if (inputMax === Infinity) result = result - inputMin;
            else result = (result - inputMin) / (inputMax - inputMin);
            result = easing(result);
            if (outputMin === -Infinity) result = -result;
            else if (outputMax === Infinity) result = result + outputMin;
            else result = result * (outputMax - outputMin) + outputMin;
            return result;
          }
          function findRange(input, inputRange) {
            for (var i = 1; i < inputRange.length - 1; ++i)
              if (inputRange[i] >= input) break;
            return i - 1;
          }
          // src/easings.ts
          var steps =
            (steps2, direction = "end") =>
            (progress2) => {
              progress2 =
                direction === "end"
                  ? Math.min(progress2, 0.999)
                  : Math.max(progress2, 1e-3);
              const expanded = progress2 * steps2;
              const rounded =
                direction === "end"
                  ? Math.floor(expanded)
                  : Math.ceil(expanded);
              return clamp(0, 1, rounded / steps2);
            };
          var c1 = 1.70158;
          var c2 = c1 * 1.525;
          var c3 = c1 + 1;
          var c4 = (2 * Math.PI) / 3;
          var c5 = (2 * Math.PI) / 4.5;
          var bounceOut = (x) => {
            const n1 = 7.5625;
            const d1 = 2.75;
            if (x < 1 / d1) {
              return n1 * x * x;
            } else if (x < 2 / d1) {
              return n1 * (x -= 1.5 / d1) * x + 0.75;
            } else if (x < 2.5 / d1) {
              return n1 * (x -= 2.25 / d1) * x + 0.9375;
            } else {
              return n1 * (x -= 2.625 / d1) * x + 0.984375;
            }
          };
          var easings = {
            linear: (x) => x,
            easeInQuad: (x) => x * x,
            easeOutQuad: (x) => 1 - (1 - x) * (1 - x),
            easeInOutQuad: (x) =>
              x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,
            easeInCubic: (x) => x * x * x,
            easeOutCubic: (x) => 1 - Math.pow(1 - x, 3),
            easeInOutCubic: (x) =>
              x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,
            easeInQuart: (x) => x * x * x * x,
            easeOutQuart: (x) => 1 - Math.pow(1 - x, 4),
            easeInOutQuart: (x) =>
              x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,
            easeInQuint: (x) => x * x * x * x * x,
            easeOutQuint: (x) => 1 - Math.pow(1 - x, 5),
            easeInOutQuint: (x) =>
              x < 0.5
                ? 16 * x * x * x * x * x
                : 1 - Math.pow(-2 * x + 2, 5) / 2,
            easeInSine: (x) => 1 - Math.cos((x * Math.PI) / 2),
            easeOutSine: (x) => Math.sin((x * Math.PI) / 2),
            easeInOutSine: (x) => -(Math.cos(Math.PI * x) - 1) / 2,
            easeInExpo: (x) => (x === 0 ? 0 : Math.pow(2, 10 * x - 10)),
            easeOutExpo: (x) => (x === 1 ? 1 : 1 - Math.pow(2, -10 * x)),
            easeInOutExpo: (x) =>
              x === 0
                ? 0
                : x === 1
                  ? 1
                  : x < 0.5
                    ? Math.pow(2, 20 * x - 10) / 2
                    : (2 - Math.pow(2, -20 * x + 10)) / 2,
            easeInCirc: (x) => 1 - Math.sqrt(1 - Math.pow(x, 2)),
            easeOutCirc: (x) => Math.sqrt(1 - Math.pow(x - 1, 2)),
            easeInOutCirc: (x) =>
              x < 0.5
                ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2
                : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,
            easeInBack: (x) => c3 * x * x * x - c1 * x * x,
            easeOutBack: (x) =>
              1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),
            easeInOutBack: (x) =>
              x < 0.5
                ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2
                : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) /
                  2,
            easeInElastic: (x) =>
              x === 0
                ? 0
                : x === 1
                  ? 1
                  : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),
            easeOutElastic: (x) =>
              x === 0
                ? 0
                : x === 1
                  ? 1
                  : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,
            easeInOutElastic: (x) =>
              x === 0
                ? 0
                : x === 1
                  ? 1
                  : x < 0.5
                    ? -(
                        Math.pow(2, 20 * x - 10) *
                        Math.sin((20 * x - 11.125) * c5)
                      ) / 2
                    : (Math.pow(2, -20 * x + 10) *
                        Math.sin((20 * x - 11.125) * c5)) /
                        2 +
                      1,
            easeInBounce: (x) => 1 - bounceOut(1 - x),
            easeOutBounce: bounceOut,
            easeInOutBounce: (x) =>
              x < 0.5
                ? (1 - bounceOut(1 - 2 * x)) / 2
                : (1 + bounceOut(2 * x - 1)) / 2,
            steps,
          };
          // src/fluids.ts
          var $get = Symbol.for("FluidValue.get");
          var $observers = Symbol.for("FluidValue.observers");
          var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
          var getFluidValue = (arg) => (arg && arg[$get] ? arg[$get]() : arg);
          var getFluidObservers = (target) => target[$observers] || null;
          function callFluidObserver(observer2, event) {
            if (observer2.eventObserved) {
              observer2.eventObserved(event);
            } else {
              observer2(event);
            }
          }
          function callFluidObservers(target, event) {
            const observers = target[$observers];
            if (observers) {
              observers.forEach((observer2) => {
                callFluidObserver(observer2, event);
              });
            }
          }
          var FluidValue = class {
            constructor(get) {
              if (!get && !(get = this.get)) {
                throw Error("Unknown getter");
              }
              setFluidGetter(this, get);
            }
          };
          $get, $observers;
          var setFluidGetter = (target, get) => setHidden(target, $get, get);
          function addFluidObserver(target, observer2) {
            if (target[$get]) {
              let observers = target[$observers];
              if (!observers) {
                setHidden(
                  target,
                  $observers,
                  (observers = /* @__PURE__ */ new Set()),
                );
              }
              if (!observers.has(observer2)) {
                observers.add(observer2);
                if (target.observerAdded) {
                  target.observerAdded(observers.size, observer2);
                }
              }
            }
            return observer2;
          }
          function removeFluidObserver(target, observer2) {
            const observers = target[$observers];
            if (observers && observers.has(observer2)) {
              const count = observers.size - 1;
              if (count) {
                observers.delete(observer2);
              } else {
                target[$observers] = null;
              }
              if (target.observerRemoved) {
                target.observerRemoved(count, observer2);
              }
            }
          }
          var setHidden = (target, key, value) =>
            Object.defineProperty(target, key, {
              value,
              writable: true,
              configurable: true,
            });
          // src/regexs.ts
          var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
          var colorRegex =
            /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
          var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
          var rgbaRegex =
            /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
          var cssVariableRegex =
            /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
          // src/variableToRgba.ts
          var variableToRgba = (input) => {
            const [token, fallback] = parseCSSVariable(input);
            if (!token || isSSR()) {
              return input;
            }
            const value = window
              .getComputedStyle(document.documentElement)
              .getPropertyValue(token);
            if (value) {
              return value.trim();
            } else if (fallback && fallback.startsWith("--")) {
              const value2 = window
                .getComputedStyle(document.documentElement)
                .getPropertyValue(fallback);
              if (value2) {
                return value2;
              } else {
                return input;
              }
            } else if (fallback && cssVariableRegex.test(fallback)) {
              return variableToRgba(fallback);
            } else if (fallback) {
              return fallback;
            }
            return input;
          };
          var parseCSSVariable = (current) => {
            const match = cssVariableRegex.exec(current);
            if (!match) return [,];
            const [, token, fallback] = match;
            return [token, fallback];
          };
          // src/stringInterpolation.ts
          var namedColorRegex;
          var rgbaRound = (_, p1, p2, p3, p4) =>
            `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
          var createStringInterpolator2 = (config) => {
            if (!namedColorRegex)
              namedColorRegex = colors // match color names, ignore partial matches
                ? new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g") // never match
                : /^\b$/;
            const output = config.output.map((value) => {
              return getFluidValue(value)
                .replace(cssVariableRegex, variableToRgba)
                .replace(colorRegex, colorToRgba)
                .replace(namedColorRegex, colorToRgba);
            });
            const keyframes = output.map((value) =>
              value.match(numberRegex).map(Number),
            );
            const outputRanges = keyframes[0].map((_, i) =>
              keyframes.map((values) => {
                if (!(i in values)) {
                  throw Error('The arity of each "output" value must be equal');
                }
                return values[i];
              }),
            );
            const interpolators = outputRanges.map((output2) =>
              createInterpolator({
                ...config,
                output: output2,
              }),
            );
            return (input) => {
              const missingUnit =
                !unitRegex.test(output[0]) &&
                output
                  .find((value) => unitRegex.test(value))
                  ?.replace(numberRegex, "");
              let i = 0;
              return output[0]
                .replace(
                  numberRegex,
                  () => `${interpolators[i++](input)}${missingUnit || ""}`,
                )
                .replace(rgbaRegex, rgbaRound);
            };
          };
          // src/deprecations.ts
          var prefix = "react-spring: ";
          var once = (fn) => {
            const func = fn;
            let called = false;
            if (typeof func != "function") {
              throw new TypeError(
                `${prefix}once requires a function parameter`,
              );
            }
            return (...args) => {
              if (!called) {
                func(...args);
                called = true;
              }
            };
          };
          var warnInterpolate = once(console.warn);
          function deprecateInterpolate() {
            warnInterpolate(
              `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`,
            );
          }
          var warnDirectCall = once(console.warn);
          function deprecateDirectCall() {
            warnDirectCall(
              `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`,
            );
          }
          // src/isAnimatedString.ts
          function isAnimatedString(value) {
            return (
              is.str(value) &&
              (value[0] == "#" ||
                /\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR
                (!isSSR() && cssVariableRegex.test(value)) ||
                value in (colors || {}))
            );
          }
          // src/dom-events/resize/resizeElement.ts
          var observer;
          var resizeHandlers = /* @__PURE__ */ new WeakMap();
          var handleObservation = (entries) =>
            entries.forEach(({ target, contentRect }) => {
              return resizeHandlers
                .get(target)
                ?.forEach((handler) => handler(contentRect));
            });
          function resizeElement(handler, target) {
            if (!observer) {
              if (typeof ResizeObserver !== "undefined") {
                observer = new ResizeObserver(handleObservation);
              }
            }
            let elementHandlers = resizeHandlers.get(target);
            if (!elementHandlers) {
              elementHandlers = /* @__PURE__ */ new Set();
              resizeHandlers.set(target, elementHandlers);
            }
            elementHandlers.add(handler);
            if (observer) {
              observer.observe(target);
            }
            return () => {
              const elementHandlers2 = resizeHandlers.get(target);
              if (!elementHandlers2) return;
              elementHandlers2.delete(handler);
              if (!elementHandlers2.size && observer) {
                observer.unobserve(target);
              }
            };
          }
          // src/dom-events/resize/resizeWindow.ts
          var listeners = /* @__PURE__ */ new Set();
          var cleanupWindowResizeHandler;
          var createResizeHandler = () => {
            const handleResize = () => {
              listeners.forEach((callback) =>
                callback({
                  width: window.innerWidth,
                  height: window.innerHeight,
                }),
              );
            };
            window.addEventListener("resize", handleResize);
            return () => {
              window.removeEventListener("resize", handleResize);
            };
          };
          var resizeWindow = (callback) => {
            listeners.add(callback);
            if (!cleanupWindowResizeHandler) {
              cleanupWindowResizeHandler = createResizeHandler();
            }
            return () => {
              listeners.delete(callback);
              if (!listeners.size && cleanupWindowResizeHandler) {
                cleanupWindowResizeHandler();
                cleanupWindowResizeHandler = void 0;
              }
            };
          };
          // src/dom-events/resize/index.ts
          var onResize = (
            callback,
            { container = document.documentElement } = {},
          ) => {
            if (container === document.documentElement) {
              return resizeWindow(callback);
            } else {
              return resizeElement(callback, container);
            }
          };
          // src/progress.ts
          var progress = (min, max, value) =>
            max - min === 0 ? 1 : (value - min) / (max - min);
          // src/dom-events/scroll/ScrollHandler.ts
          var SCROLL_KEYS = {
            x: {
              length: "Width",
              position: "Left",
            },
            y: {
              length: "Height",
              position: "Top",
            },
          };
          var ScrollHandler = class {
            constructor(callback, container) {
              this.createAxis = () => ({
                current: 0,
                progress: 0,
                scrollLength: 0,
              });
              this.updateAxis = (axisName) => {
                const axis = this.info[axisName];
                const { length, position } = SCROLL_KEYS[axisName];
                axis.current = this.container[`scroll${position}`];
                axis.scrollLength =
                  this.container[`scroll${length}`] -
                  this.container[`client${length}`];
                axis.progress = progress(0, axis.scrollLength, axis.current);
              };
              this.update = () => {
                this.updateAxis("x");
                this.updateAxis("y");
              };
              this.sendEvent = () => {
                this.callback(this.info);
              };
              this.advance = () => {
                this.update();
                this.sendEvent();
              };
              this.callback = callback;
              this.container = container;
              this.info = {
                time: 0,
                x: this.createAxis(),
                y: this.createAxis(),
              };
            }
          };
          // src/dom-events/scroll/index.ts
          var scrollListeners = /* @__PURE__ */ new WeakMap();
          var resizeListeners = /* @__PURE__ */ new WeakMap();
          var onScrollHandlers = /* @__PURE__ */ new WeakMap();
          var getTarget = (container) =>
            container === document.documentElement ? window : container;
          var onScroll = (
            callback,
            { container = document.documentElement } = {},
          ) => {
            let containerHandlers = onScrollHandlers.get(container);
            if (!containerHandlers) {
              containerHandlers = /* @__PURE__ */ new Set();
              onScrollHandlers.set(container, containerHandlers);
            }
            const containerHandler = new ScrollHandler(callback, container);
            containerHandlers.add(containerHandler);
            if (!scrollListeners.has(container)) {
              const listener = () => {
                containerHandlers?.forEach((handler) => handler.advance());
                return true;
              };
              scrollListeners.set(container, listener);
              const target = getTarget(container);
              window.addEventListener("resize", listener, {
                passive: true,
              });
              if (container !== document.documentElement) {
                resizeListeners.set(
                  container,
                  onResize(listener, {
                    container,
                  }),
                );
              }
              target.addEventListener("scroll", listener, {
                passive: true,
              });
            }
            const animateScroll = scrollListeners.get(container);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
              "raf"
            ])(animateScroll);
            return () => {
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                "raf"
              ].cancel(animateScroll);
              const containerHandlers2 = onScrollHandlers.get(container);
              if (!containerHandlers2) return;
              containerHandlers2.delete(containerHandler);
              if (containerHandlers2.size) return;
              const listener = scrollListeners.get(container);
              scrollListeners.delete(container);
              if (listener) {
                getTarget(container).removeEventListener("scroll", listener);
                window.removeEventListener("resize", listener);
                resizeListeners.get(container)?.();
              }
            };
          };
          function useConstant(init) {
            const ref = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useRef"
            ])(null);
            if (ref.current === null) {
              ref.current = init();
            }
            return ref.current;
          }
          var useIsomorphicLayoutEffect = isSSR()
            ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useEffect"
              ]
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useLayoutEffect"
              ];
          // src/hooks/useIsMounted.ts
          var useIsMounted = () => {
            const isMounted = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useRef"
            ])(false);
            useIsomorphicLayoutEffect(
              {
                "useIsMounted.useIsomorphicLayoutEffect": () => {
                  isMounted.current = true;
                  return {
                    "useIsMounted.useIsomorphicLayoutEffect": () => {
                      isMounted.current = false;
                    },
                  }["useIsMounted.useIsomorphicLayoutEffect"];
                },
              }["useIsMounted.useIsomorphicLayoutEffect"],
              [],
            );
            return isMounted;
          };
          // src/hooks/useForceUpdate.ts
          function useForceUpdate() {
            const update = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useState"
            ])()[1];
            const isMounted = useIsMounted();
            return () => {
              if (isMounted.current) {
                update(Math.random());
              }
            };
          }
          function useMemoOne(getResult, inputs) {
            const [initial] = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useState"
            ])(
              {
                "useMemoOne.useState2": () => ({
                  inputs,
                  result: getResult(),
                }),
              }["useMemoOne.useState2"],
            );
            const committed = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useRef"
            ])();
            const prevCache = committed.current;
            let cache = prevCache;
            if (cache) {
              const useCache = Boolean(
                inputs && cache.inputs && areInputsEqual(inputs, cache.inputs),
              );
              if (!useCache) {
                cache = {
                  inputs,
                  result: getResult(),
                };
              }
            } else {
              cache = initial;
            }
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useEffect"
            ])(
              {
                "useMemoOne.useEffect2": () => {
                  committed.current = cache;
                  if (prevCache == initial) {
                    initial.inputs = initial.result = void 0;
                  }
                },
              }["useMemoOne.useEffect2"],
              [cache],
            );
            return cache.result;
          }
          function areInputsEqual(next, prev) {
            if (next.length !== prev.length) {
              return false;
            }
            for (let i = 0; i < next.length; i++) {
              if (next[i] !== prev[i]) {
                return false;
              }
            }
            return true;
          }
          var useOnce = (effect) =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useEffect"
            ])(effect, emptyDeps);
          var emptyDeps = [];
          function usePrev(value) {
            const prevRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useRef"
            ])();
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useEffect"
            ])(
              {
                "usePrev.useEffect4": () => {
                  prevRef.current = value;
                },
              }["usePrev.useEffect4"],
            );
            return prevRef.current;
          }
          var useReducedMotion = () => {
            const [reducedMotion, setReducedMotion] = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "useState"
            ])(null);
            useIsomorphicLayoutEffect(
              {
                "useReducedMotion.useIsomorphicLayoutEffect": () => {
                  const mql = window.matchMedia("(prefers-reduced-motion)");
                  const handleMediaChange = {
                    "useReducedMotion.useIsomorphicLayoutEffect.handleMediaChange":
                      (e) => {
                        setReducedMotion(e.matches);
                        assign({
                          skipAnimation: e.matches,
                        });
                      },
                  }[
                    "useReducedMotion.useIsomorphicLayoutEffect.handleMediaChange"
                  ];
                  handleMediaChange(mql);
                  if (mql.addEventListener) {
                    mql.addEventListener("change", handleMediaChange);
                  } else {
                    mql.addListener(handleMediaChange);
                  }
                  return {
                    "useReducedMotion.useIsomorphicLayoutEffect": () => {
                      if (mql.removeEventListener) {
                        mql.removeEventListener("change", handleMediaChange);
                      } else {
                        mql.removeListener(handleMediaChange);
                      }
                    },
                  }["useReducedMotion.useIsomorphicLayoutEffect"];
                },
              }["useReducedMotion.useIsomorphicLayoutEffect"],
              [],
            );
            return reducedMotion;
          };
          //# sourceMappingURL=react-spring_shared.modern.mjs.map
        }
      },
    "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <module evaluation>":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({});
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/react/index.js [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <locals>",
            );
        }
      },
    "[project]/node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/Animated.ts
          __turbopack_context__.s({
            Animated: () => Animated,
            AnimatedArray: () => AnimatedArray,
            AnimatedObject: () => AnimatedObject,
            AnimatedString: () => AnimatedString,
            AnimatedValue: () => AnimatedValue,
            createHost: () => createHost,
            getAnimated: () => getAnimated,
            getAnimatedType: () => getAnimatedType,
            getPayload: () => getPayload,
            isAnimated: () => isAnimated,
            setAnimated: () => setAnimated,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <module evaluation>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <locals>",
            );
          // src/withAnimated.tsx
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/react/index.js [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs [client] (ecmascript)",
            );
          var $node = Symbol.for("Animated:node");
          var isAnimated = (value) => !!value && value[$node] === value;
          var getAnimated = (owner) => owner && owner[$node];
          var setAnimated = (owner, node) =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "defineHidden"
            ])(owner, $node, node);
          var getPayload = (owner) =>
            owner && owner[$node] && owner[$node].getPayload();
          var Animated = class {
            constructor() {
              setAnimated(this, this);
            }
            /** Get every `AnimatedValue` used by this node. */ getPayload() {
              return this.payload || [];
            }
          };
          var AnimatedValue = class extends Animated {
            constructor(_value) {
              super();
              this._value = _value;
              this.done = true;
              this.durationProgress = 0;
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].num(this._value)
              ) {
                this.lastPosition = this._value;
              }
            }
            /** @internal */ static create(value) {
              return new AnimatedValue(value);
            }
            getPayload() {
              return [this];
            }
            getValue() {
              return this._value;
            }
            setValue(value, step) {
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].num(value)
              ) {
                this.lastPosition = value;
                if (step) {
                  value = Math.round(value / step) * step;
                  if (this.done) {
                    this.lastPosition = value;
                  }
                }
              }
              if (this._value === value) {
                return false;
              }
              this._value = value;
              return true;
            }
            reset() {
              const { done } = this;
              this.done = false;
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].num(this._value)
              ) {
                this.elapsedTime = 0;
                this.durationProgress = 0;
                this.lastPosition = this._value;
                if (done) this.lastVelocity = null;
                this.v0 = null;
              }
            }
          };
          var AnimatedString = class extends AnimatedValue {
            constructor(value) {
              super(0);
              this._string = null;
              this._toString = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "createInterpolator"
              ])({
                output: [value, value],
              });
            }
            /** @internal */ static create(value) {
              return new AnimatedString(value);
            }
            getValue() {
              const value = this._string;
              return value == null
                ? (this._string = this._toString(this._value))
                : value;
            }
            setValue(value) {
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].str(value)
              ) {
                if (value == this._string) {
                  return false;
                }
                this._string = value;
                this._value = 1;
              } else if (super.setValue(value)) {
                this._string = null;
              } else {
                return false;
              }
              return true;
            }
            reset(goal) {
              if (goal) {
                this._toString = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "createInterpolator"
                ])({
                  output: [this.getValue(), goal],
                });
              }
              this._value = 0;
              super.reset();
            }
          };
          // src/context.ts
          var TreeContext = {
            dependencies: null,
          };
          // src/AnimatedObject.ts
          var AnimatedObject = class extends Animated {
            constructor(source) {
              super();
              this.source = source;
              this.setValue(source);
            }
            getValue(animated) {
              const values = {};
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "eachProp"
              ])(this.source, (source, key) => {
                if (isAnimated(source)) {
                  values[key] = source.getValue(animated);
                } else if (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "hasFluidValue"
                  ])(source)
                ) {
                  values[key] = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "getFluidValue"
                  ])(source);
                } else if (!animated) {
                  values[key] = source;
                }
              });
              return values;
            }
            /** Replace the raw object data */ setValue(source) {
              this.source = source;
              this.payload = this._makePayload(source);
            }
            reset() {
              if (this.payload) {
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "each"
                ])(this.payload, (node) => node.reset());
              }
            }
            /** Create a payload set. */ _makePayload(source) {
              if (source) {
                const payload = /* @__PURE__ */ new Set();
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "eachProp"
                ])(source, this._addToPayload, payload);
                return Array.from(payload);
              }
            }
            /** Add to a payload set. */ _addToPayload(source) {
              if (
                TreeContext.dependencies &&
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "hasFluidValue"
                ])(source)
              ) {
                TreeContext.dependencies.add(source);
              }
              const payload = getPayload(source);
              if (payload) {
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "each"
                ])(payload, (node) => this.add(node));
              }
            }
          };
          // src/AnimatedArray.ts
          var AnimatedArray = class extends AnimatedObject {
            constructor(source) {
              super(source);
            }
            /** @internal */ static create(source) {
              return new AnimatedArray(source);
            }
            getValue() {
              return this.source.map((node) => node.getValue());
            }
            setValue(source) {
              const payload = this.getPayload();
              if (source.length == payload.length) {
                return payload
                  .map((node, i) => node.setValue(source[i]))
                  .some(Boolean);
              }
              super.setValue(source.map(makeAnimated));
              return true;
            }
          };
          function makeAnimated(value) {
            const nodeType = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "isAnimatedString"
            ])(value)
              ? AnimatedString
              : AnimatedValue;
            return nodeType.create(value);
          }
          function getAnimatedType(value) {
            const parentNode = getAnimated(value);
            return parentNode
              ? parentNode.constructor
              : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "is"
                  ].arr(value)
                ? AnimatedArray
                : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      "isAnimatedString"
                    ])(value)
                  ? AnimatedString
                  : AnimatedValue;
          }
          var withAnimated = (Component, host) => {
            const hasInstance = // Function components must use "forwardRef" to avoid being
              // re-rendered on every animation frame.
              !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "is"
              ].fun(Component) ||
              (Component.prototype && Component.prototype.isReactComponent);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
              "forwardRef"
            ])((givenProps, givenRef) => {
              const instanceRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useRef"
              ])(null);
              const ref =
                hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                  "useCallback"
                ])(
                  {
                    "withAnimated.useCallback": (value) => {
                      instanceRef.current = updateRef(givenRef, value);
                    },
                  }["withAnimated.useCallback"],
                  [givenRef],
                );
              const [props, deps] = getAnimatedState(givenProps, host);
              const forceUpdate = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "useForceUpdate"
              ])();
              const callback = () => {
                const instance = instanceRef.current;
                if (hasInstance && !instance) {
                  return;
                }
                const didUpdate = instance
                  ? host.applyAnimatedValues(instance, props.getValue(true))
                  : false;
                if (didUpdate === false) {
                  forceUpdate();
                }
              };
              const observer = new PropsObserver(callback, deps);
              const observerRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useRef"
              ])();
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "useIsomorphicLayoutEffect"
              ])(
                {
                  "withAnimated.useIsomorphicLayoutEffect": () => {
                    observerRef.current = observer;
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      "each"
                    ])(
                      deps,
                      {
                        "withAnimated.useIsomorphicLayoutEffect": (dep) =>
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                            "addFluidObserver"
                          ])(dep, observer),
                      }["withAnimated.useIsomorphicLayoutEffect"],
                    );
                    return {
                      "withAnimated.useIsomorphicLayoutEffect": () => {
                        if (observerRef.current) {
                          (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                            "each"
                          ])(
                            observerRef.current.deps,
                            {
                              "withAnimated.useIsomorphicLayoutEffect": (dep) =>
                                (0,
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                                  "removeFluidObserver"
                                ])(dep, observerRef.current),
                            }["withAnimated.useIsomorphicLayoutEffect"],
                          );
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                            "raf"
                          ].cancel(observerRef.current.update);
                        }
                      },
                    }["withAnimated.useIsomorphicLayoutEffect"];
                  },
                }["withAnimated.useIsomorphicLayoutEffect"],
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "useEffect"
              ])(callback, []);
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "useOnce"
              ])(
                {
                  "withAnimated.useOnce": () =>
                    ({
                      "withAnimated.useOnce": () => {
                        const observer2 = observerRef.current;
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                          "each"
                        ])(
                          observer2.deps,
                          {
                            "withAnimated.useOnce": (dep) =>
                              (0,
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                                "removeFluidObserver"
                              ])(dep, observer2),
                          }["withAnimated.useOnce"],
                        );
                      },
                    })["withAnimated.useOnce"],
                }["withAnimated.useOnce"],
              );
              const usedProps = host.getComponentProps(props.getValue());
              return /* @__PURE__ */ (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "createElement"
              ])(Component, {
                ...usedProps,
                ref,
              });
            });
          };
          var PropsObserver = class {
            constructor(update, deps) {
              this.update = update;
              this.deps = deps;
            }
            eventObserved(event) {
              if (event.type == "change") {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$rafz$2f$dist$2f$react$2d$spring_rafz$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
                  "raf"
                ].write(this.update);
              }
            }
          };
          function getAnimatedState(props, host) {
            const dependencies = /* @__PURE__ */ new Set();
            TreeContext.dependencies = dependencies;
            if (props.style)
              props = {
                ...props,
                style: host.createAnimatedStyle(props.style),
              };
            props = new AnimatedObject(props);
            TreeContext.dependencies = null;
            return [props, dependencies];
          }
          function updateRef(ref, value) {
            if (ref) {
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].fun(ref)
              )
                ref(value);
              else ref.current = value;
            }
            return value;
          }
          // src/createHost.ts
          var cacheKey = Symbol.for("AnimatedComponent");
          var createHost = (
            components,
            {
              applyAnimatedValues = () => false,
              createAnimatedStyle = (style) => new AnimatedObject(style),
              getComponentProps = (props) => props,
            } = {},
          ) => {
            const hostConfig = {
              applyAnimatedValues,
              createAnimatedStyle,
              getComponentProps,
            };
            const animated = (Component) => {
              const displayName = getDisplayName(Component) || "Anonymous";
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].str(Component)
              ) {
                Component =
                  animated[Component] ||
                  (animated[Component] = withAnimated(Component, hostConfig));
              } else {
                Component =
                  Component[cacheKey] ||
                  (Component[cacheKey] = withAnimated(Component, hostConfig));
              }
              Component.displayName = `Animated(${displayName})`;
              return Component;
            };
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "eachProp"
            ])(components, (Component, key) => {
              if (
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "is"
                ].arr(components)
              ) {
                key = getDisplayName(Component);
              }
              animated[key] = animated(Component);
            });
            return {
              animated,
            };
          };
          var getDisplayName = (arg) =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "is"
            ].str(arg)
              ? arg
              : arg &&
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "is"
                  ].str(arg.displayName)
                ? arg.displayName
                : (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "is"
                  ].fun(arg) &&
                    arg.name) ||
                  null;
          //# sourceMappingURL=react-spring_animated.modern.mjs.map
        }
      },
    "[project]/node_modules/@react-spring/types/dist/react-spring_types.modern.mjs [client] (ecmascript)":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/utils.ts
          __turbopack_context__.s({
            Any: () => Any,
          });
          var Any = class {};
          //# sourceMappingURL=react-spring_types.modern.mjs.map
        }
      },
    "[project]/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs [client] (ecmascript) <locals>":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          // src/index.ts
          __turbopack_context__.s({
            a: () => animated,
            animated: () => animated,
          });
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$core$2f$dist$2f$react$2d$spring_core$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/core/dist/react-spring_core.modern.mjs [client] (ecmascript) <module evaluation>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <locals>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$dom$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/react-dom/index.js [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <module evaluation>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$animated$2f$dist$2f$react$2d$spring_animated$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs [client] (ecmascript)",
            );
          // src/applyAnimatedValues.ts
          var isCustomPropRE = /^--/;
          function dangerousStyleValue(name, value) {
            if (value == null || typeof value === "boolean" || value === "")
              return "";
            if (
              typeof value === "number" &&
              value !== 0 &&
              !isCustomPropRE.test(name) &&
              !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
            )
              return value + "px";
            return ("" + value).trim();
          }
          var attributeCache = {};
          function applyAnimatedValues(instance, props) {
            if (!instance.nodeType || !instance.setAttribute) {
              return false;
            }
            const isFilterElement =
              instance.nodeName === "filter" ||
              (instance.parentNode &&
                instance.parentNode.nodeName === "filter");
            const {
              className,
              style,
              children,
              scrollTop,
              scrollLeft,
              viewBox,
              ...attributes
            } = props;
            const values = Object.values(attributes);
            const names = Object.keys(attributes).map((name) =>
              isFilterElement || instance.hasAttribute(name)
                ? name
                : attributeCache[name] ||
                  (attributeCache[name] = name.replace(
                    /([A-Z])/g, // Attributes are written in dash case
                    (n) => "-" + n.toLowerCase(),
                  )),
            );
            if (children !== void 0) {
              instance.textContent = children;
            }
            for (const name in style) {
              if (style.hasOwnProperty(name)) {
                const value = dangerousStyleValue(name, style[name]);
                if (isCustomPropRE.test(name)) {
                  instance.style.setProperty(name, value);
                } else {
                  instance.style[name] = value;
                }
              }
            }
            names.forEach((name, i) => {
              instance.setAttribute(name, values[i]);
            });
            if (className !== void 0) {
              instance.className = className;
            }
            if (scrollTop !== void 0) {
              instance.scrollTop = scrollTop;
            }
            if (scrollLeft !== void 0) {
              instance.scrollLeft = scrollLeft;
            }
            if (viewBox !== void 0) {
              instance.setAttribute("viewBox", viewBox);
            }
          }
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          };
          var prefixKey = (prefix, key) =>
            prefix + key.charAt(0).toUpperCase() + key.substring(1);
          var prefixes = ["Webkit", "Ms", "Moz", "O"];
          isUnitlessNumber = Object.keys(isUnitlessNumber).reduce(
            (acc, prop) => {
              prefixes.forEach(
                (prefix) => (acc[prefixKey(prefix, prop)] = acc[prop]),
              );
              return acc;
            },
            isUnitlessNumber,
          );
          var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
          var pxTransforms = /^(translate)/;
          var degTransforms = /^(rotate|skew)/;
          var addUnit = (value, unit) =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "is"
            ].num(value) && value !== 0
              ? value + unit
              : value;
          var isValueIdentity = (value, id) =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              "is"
            ].arr(value)
              ? value.every((v) => isValueIdentity(v, id))
              : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "is"
                  ].num(value)
                ? value === id
                : parseFloat(value) === id;
          var AnimatedStyle = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$animated$2f$dist$2f$react$2d$spring_animated$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
            "AnimatedObject"
          ] {
            constructor({ x, y, z, ...style }) {
              const inputs = [];
              const transforms = [];
              if (x || y || z) {
                inputs.push([x || 0, y || 0, z || 0]);
                transforms.push((xyz) => [
                  `translate3d(${xyz.map((v) => addUnit(v, "px")).join(",")})`,
                  // prettier-ignore
                  isValueIdentity(xyz, 0),
                ]);
              }
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "eachProp"
              ])(style, (value, key) => {
                if (key === "transform") {
                  inputs.push([value || ""]);
                  transforms.push((transform) => [transform, transform === ""]);
                } else if (domTransforms.test(key)) {
                  delete style[key];
                  if (
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      "is"
                    ].und(value)
                  )
                    return;
                  const unit = pxTransforms.test(key)
                    ? "px"
                    : degTransforms.test(key)
                      ? "deg"
                      : "";
                  inputs.push(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      "toArray"
                    ])(value),
                  );
                  transforms.push(
                    key === "rotate3d"
                      ? ([x2, y2, z2, deg]) => [
                          `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`,
                          isValueIdentity(deg, 0),
                        ]
                      : (input) => [
                          `${key}(${input.map((v) => addUnit(v, unit)).join(",")})`,
                          isValueIdentity(
                            input,
                            key.startsWith("scale") ? 1 : 0,
                          ),
                        ],
                  );
                }
              });
              if (inputs.length) {
                style.transform = new FluidTransform(inputs, transforms);
              }
              super(style);
            }
          };
          var FluidTransform = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            "FluidValue"
          ] {
            constructor(inputs, transforms) {
              super();
              this.inputs = inputs;
              this.transforms = transforms;
              this._value = null;
            }
            get() {
              return this._value || (this._value = this._get());
            }
            _get() {
              let transform = "";
              let identity = true;
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "each"
              ])(this.inputs, (input, i) => {
                const arg1 = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "getFluidValue"
                ])(input[0]);
                const [t, id] = this.transforms[i](
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "is"
                  ].arr(arg1)
                    ? arg1
                    : input.map(
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                          "getFluidValue"
                        ],
                      ),
                );
                transform += " " + t;
                identity = identity && id;
              });
              return identity ? "none" : transform;
            }
            // Start observing our inputs once we have an observer.
            observerAdded(count) {
              if (count == 1)
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "each"
                ])(this.inputs, (input) =>
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "each"
                  ])(
                    input,
                    (value) =>
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        "hasFluidValue"
                      ])(value) &&
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        "addFluidObserver"
                      ])(value, this),
                  ),
                );
            }
            // Stop observing our inputs once we have no observers.
            observerRemoved(count) {
              if (count == 0)
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  "each"
                ])(this.inputs, (input) =>
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    "each"
                  ])(
                    input,
                    (value) =>
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        "hasFluidValue"
                      ])(value) &&
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        "removeFluidObserver"
                      ])(value, this),
                  ),
                );
            }
            eventObserved(event) {
              if (event.type == "change") {
                this._value = null;
              }
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "callFluidObservers"
              ])(this, event);
            }
          };
          // src/primitives.ts
          var primitives = [
            "a",
            "abbr",
            "address",
            "area",
            "article",
            "aside",
            "audio",
            "b",
            "base",
            "bdi",
            "bdo",
            "big",
            "blockquote",
            "body",
            "br",
            "button",
            "canvas",
            "caption",
            "cite",
            "code",
            "col",
            "colgroup",
            "data",
            "datalist",
            "dd",
            "del",
            "details",
            "dfn",
            "dialog",
            "div",
            "dl",
            "dt",
            "em",
            "embed",
            "fieldset",
            "figcaption",
            "figure",
            "footer",
            "form",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "head",
            "header",
            "hgroup",
            "hr",
            "html",
            "i",
            "iframe",
            "img",
            "input",
            "ins",
            "kbd",
            "keygen",
            "label",
            "legend",
            "li",
            "link",
            "main",
            "map",
            "mark",
            "menu",
            "menuitem",
            "meta",
            "meter",
            "nav",
            "noscript",
            "object",
            "ol",
            "optgroup",
            "option",
            "output",
            "p",
            "param",
            "picture",
            "pre",
            "progress",
            "q",
            "rp",
            "rt",
            "ruby",
            "s",
            "samp",
            "script",
            "section",
            "select",
            "small",
            "source",
            "span",
            "strong",
            "style",
            "sub",
            "summary",
            "sup",
            "table",
            "tbody",
            "td",
            "textarea",
            "tfoot",
            "th",
            "thead",
            "time",
            "title",
            "tr",
            "track",
            "u",
            "ul",
            "var",
            "video",
            "wbr",
            // SVG
            "circle",
            "clipPath",
            "defs",
            "ellipse",
            "foreignObject",
            "g",
            "image",
            "line",
            "linearGradient",
            "mask",
            "path",
            "pattern",
            "polygon",
            "polyline",
            "radialGradient",
            "rect",
            "stop",
            "svg",
            "text",
            "tspan",
          ];
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            "Globals"
          ].assign({
            batchedUpdates:
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$dom$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__[
                "unstable_batchedUpdates"
              ],
            createStringInterpolator:
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "createStringInterpolator"
              ],
            colors:
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                "colors"
              ],
          });
          var host = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$animated$2f$dist$2f$react$2d$spring_animated$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__[
            "createHost"
          ])(primitives, {
            applyAnimatedValues,
            createAnimatedStyle: (style) => new AnimatedStyle(style),
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,
          });
          var animated = host.animated;
          //# sourceMappingURL=react-spring_web.modern.mjs.map
        }
      },
    "[project]/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs [client] (ecmascript) <module evaluation>":
      (__turbopack_context__) => {
        "use strict";

        var { g: global, __dirname } = __turbopack_context__;
        {
          __turbopack_context__.s({});
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$core$2f$dist$2f$react$2d$spring_core$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/core/dist/react-spring_core.modern.mjs [client] (ecmascript) <module evaluation>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$dom$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/react-dom/index.js [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$shared$2f$dist$2f$react$2d$spring_shared$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs [client] (ecmascript) <module evaluation>",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$animated$2f$dist$2f$react$2d$spring_animated$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs [client] (ecmascript)",
            );
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$react$2d$spring$2f$web$2f$dist$2f$react$2d$spring_web$2e$modern$2e$mjs__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
            __turbopack_context__.i(
              "[project]/node_modules/@react-spring/web/dist/react-spring_web.modern.mjs [client] (ecmascript) <locals>",
            );
        }
      },
  },
]);

//# sourceMappingURL=node_modules_75dd0019._.js.map
